version: "3.8"
services:
  node-server:
    build:
      context: ./backend/V0.2/
      dockerfile: Dockerfile.prod
      args:
        - NODE_ENV=production
        - APP_DOMAIN=${APP_DOMAIN}
        - APP_PORT=${APP_PORT}
    container_name: ${APP_DOMAIN}-prodContainer
    env_file: 
      - ./.env
    ports:
      - "3000:3000"
    volumes:
      # no needs to oaccess from host machine, the app access inside constainer only.
      - uploads_data:/usr/src/${APP_DOMAIN}/uploads 
      # sometimes need to examine the logs
      - ./backend/V0.2/logs:/usr/src/${APP_DOMAIN}/logs 
      # need to access the black list from Nginx
      - ./backend/V0.2/statics:/usr/src/${APP_DOMAIN}/statics/
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["npm", "run", "start"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:${APP_PORT}/health?service=docker-compose%20${APP_DOMAIN}-prodContainer%20healthcheck:"]
      interval: 10m
      timeout: 20s
      retries: 6
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    networks:
      - prod_network

  postgres:
    image: postgres:15-alpine
    container_name: postgres-prodContainer
    env_file: 
      - ./.env
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - prod_network

  redis:
    image: redis:alpine
    container_name: redis-prodContainer
    volumes:
      - redis_data:/data
    env_file:
      - ./.env
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - prod_network

volumes:
  uploads_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  prod_network:
    driver: bridge