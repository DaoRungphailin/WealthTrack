version: "3.8"

services:
  node-server:
    build:
      context: ./backend/V0.2/
      args:
        - NODE_ENV=${NODE_ENV}
        - APP_PORT=${APP_PORT}
        - APP_DOMAIN=${APP_DOMAIN}
    container_name: ${APP_DOMAIN}-prodContainer
    env_file: 
      - ./.env
    ports:
      - "0.0.0.0:${APP_PORT}:${APP_PORT}" # Bind to 0.0.0.0 to allow external access
    volumes:
      - /usr/src/${APP_DOMAIN}/node_modules
      - ./backend/V0.2/uploads:/usr/src/${APP_DOMAIN}/uploads
      - ./backend/V0.2/statics:/usr/src/${APP_DOMAIN}/statics/
      - ./backend/V0.2/logs:/usr/src/${APP_DOMAIN}/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "npm run dev"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:${APP_PORT}/health?service=docker-compose%20${APP_DOMAIN}-devContainer%20healthcheck"]
      interval: 1h # Poll every hour after the container is healthy
      timeout: 20s # Allow up to 20 seconds for each health check command
      retries: 2 # Retry up to 2 times before considering the container unhealthy
      start_period: 30s # Allow up to 30 seconds for initialization before the first check
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    restart: on-failure
    networks:
      - app_network

  postgres:
    image: postgres:15
    container_name: postgres_container
    env_file: 
      - ./.env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: always
    networks:
      - app_network

  redis:
    image: redis:alpine
    container_name: redis_container
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    restart: always
    networks:
      - app_network

volumes:
  postgres_data:
  redis_data:

networks:
  app_network:
    driver: bridge
