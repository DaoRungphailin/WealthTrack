version: "3.8"

services:
  node-server:
    build:
      context: ./backend/V0.2/
      args:
        - NODE_ENV=${NODE_ENV}
        - APP_PORT=${APP_PORT}
        - APP_DOMAIN=${APP_DOMAIN}
    container_name: node-container
    env_file: 
      - ./.env
    ports:
      - "127.0.0.1:${APP_PORT}:${APP_PORT}" # Bind to localhost to avoid exposing the port to the host machine
      # - "${APP_PORT}:${APP_PORT}" # Bind to 0.0.0.0 to allow external access
      - "9229:9229"
    volumes:
      - /usr/src/${APP_DOMAIN}/node_modules
      - ./backend/V0.2/uploads:/usr/src/${APP_DOMAIN}/uploads
      - ./frontend/build:/usr/src/${APP_DOMAIN}/frontend_build
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: >
      sh -c "echo 'Port binding: ${APP_PORT}:${APP_PORT}' &&
             if [ \"$NODE_ENV\" = \"production\" ]; then
               npm run start;
             elif [ \"$NODE_ENV\" = \"test\" ]; then
               npm run test;
             else
               npm run dev;
             fi"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${APP_PORT}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    restart: no
    networks:
      - app_network

  postgres:
    image: postgres:15
    container_name: postgres_container
    env_file: 
      - ./.env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: always
    networks:
      - app_network

  pgadmin:
    container_name: pgadmin4_container
    image: dpage/pgadmin4:8.13
    restart: always
    env_file:
      - ./.env
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-O", "-", "http://localhost:80/misc/ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app_network

  redis:
    image: redis:alpine
    container_name: redis_container
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    restart: always
    networks:
      - app_network

  redisinsight:
    image: redislabs/redisinsight:latest
    container_name: redisinsight
    ports:
      - "8001:8001"
    volumes:
      - redisinsight_data:/db
    depends_on:
      - redis
    restart: always
    networks:
      - app_network

  ollama:
    image: ollama/ollama:0.5.0
    container_name: ollama_container
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
  redis_data:
  redisinsight_data:
  ollama_data:
  pgadmin_data:

networks:
  app_network:
    driver: bridge
