name: Deploy to staging server

on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  build_deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Default Failure Reason
        id: set_failure
        run: |
          echo "FAILURE_REASON=Unknown error occurred" >> $GITHUB_ENV
          echo "FAILURE_STEP=None" >> $GITHUB_ENV

      - name: Verify Server Port Connectivity
        id: check_port
        continue-on-error: true
        run: |
          if ! nc -zv ${{ secrets.STAGING_SERVERS_IP }} 22 80; then
            echo "FAILURE_REASON=Could not connect to server ports (22, 80). Please check if server is up and ports are open." >> $GITHUB_ENV
            echo "FAILURE_STEP=Port Connectivity Check" >> $GITHUB_ENV
            exit 1
          fi

      - name: Setup SSH Connection
        if: steps.check_port.outcome == 'success'
        id: setup_ssh
        continue-on-error: true
        run: |
          echo "Setting up SSH connection..."
          mkdir -p ~/.ssh
          echo "${{ secrets.GH_ACTION_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa
          echo "Testing connection..."
          if ! ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.STAGING_SERVER_USERNAME }}@${{ secrets.STAGING_SERVERS_IP }} "echo 'SSH connection successful!'"; then
            echo "FAILURE_REASON=SSH connection failed. Check credentials and server SSH configuration." >> $GITHUB_ENV
            echo "FAILURE_STEP=SSH Setup" >> $GITHUB_ENV
            exit 1
          fi

      - name: Build and Deploy on Server
        if: steps.setup_ssh.outcome == 'success'
        id: deploy
        continue-on-error: true
        run: |
          echo "Starting build and deployment process on the server..."
          output=$(ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.STAGING_SERVER_USERNAME }}@${{ secrets.STAGING_SERVERS_IP }} << 'EOF'
            echo "Navigating to project directory..."
            cd ~/WealthTracking || { echo "Failed to navigate to project directory"; exit 1; }

            echo "Pulling latest changes from the repository..."
            git restore . || { echo "Failed to restore git repo"; exit 1; }
            
            echo "Executing deploy script..."
            ./deploy.sh ${{ secrets.STAGING_SERVERS_IP }} || { echo "Deployment script failed"; exit 1; }
            
            echo "Granting permissions to bash scripts..."
            chmod +x deploy.sh installing.sh start_server.sh internet.sh || { echo "Failed to grant permissions"; exit 1; }
            chmod 700 update-nginx-blacklist.sh || { echo "Failed to grant permissions"; exit 1; }

            echo "Deployment completed successfully."
          EOF
          )
          exit_code=$?

          # Store the output for both success and failure cases
          echo "DEPLOY_OUTPUT<<EOF" >> $GITHUB_ENV
          echo "$output" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          if [ $exit_code -ne 0 ]; then
            echo "FAILURE_REASON=Deployment script execution failed on server." >> $GITHUB_ENV
            echo "FAILURE_STEP=Server Deployment" >> $GITHUB_ENV
            exit 1
          fi

      - name: Determine Workflow Status
        id: status
        if: always()
        run: |
          if [ "${{ steps.check_port.outcome }}" != "success" ]; then
            echo "WORKFLOW_STATUS=failed" >> $GITHUB_ENV
          elif [ "${{ steps.setup_ssh.outcome }}" != "success" ]; then
            echo "WORKFLOW_STATUS=failed" >> $GITHUB_ENV
          elif [ "${{ steps.deploy.outcome }}" != "success" ]; then
            echo "WORKFLOW_STATUS=failed" >> $GITHUB_ENV
          else
            echo "WORKFLOW_STATUS=success" >> $GITHUB_ENV
          fi

      - name: Notify Discord on Success
        if: env.WORKFLOW_STATUS == 'success'
        uses: nobrayner/discord-webhook@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          discord-webhook: ${{ secrets.DISCORD_WEBHOOK }}
          username: "üöÄ Workflow Notifier"
          avatar-url: "https://avatars.githubusercontent.com/u/88827707?v=4"
          title: "‚ú® **${{ github.workflow }}** ran **${{ job.status }}**"
          description: |
            üîî **Triggered Event**: *`${{ github.event_name }}`* initiated by **@`${{ github.actor }}`**
            üîÑ Associated **Commit**: <https://github.com/${{ github.repository }}/commit/${{ github.sha }}>
            üì¶ **Job** ran: `${{ github.job }}`
            ‚úÖ **Deployment Status**: Success üéâ

            **Deployment Output:**  
            ```bash
            ${{ env.DEPLOY_OUTPUT }}
            ```
          include-details: "true"
          color-success: "#28a745" # Green for running the job success
          color-failure: "#8a0d04" # Dark Red for running the job failure
          color-cancelled: "#ffc107" # Yellow for running the job cancelled

      - name: Notify Discord on Failure
        if: env.WORKFLOW_STATUS == 'failed'
        uses: nobrayner/discord-webhook@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          discord-webhook: ${{ secrets.DISCORD_WEBHOOK }}
          username: "üöÄ Workflow Notifier"
          avatar-url: "https://avatars.githubusercontent.com/u/88827707?v=4"
          title: "‚ùå **${{ github.workflow }}** failed"
          description: |
            üîî **Triggered Event**: *`${{ github.event_name }}`* initiated by **@`${{ github.actor }}`**
            üîÑ Associated **Commit**: <https://github.com/${{ github.repository }}/commit/${{ github.sha }}>
            üì¶ **Job** ran: `${{ github.job }}`
            ‚ùå **Deployment Status**: Failed üö®

            **Failed Step**: `${{ env.FAILURE_STEP }}`
            **Failure Reason**:  
            ```
            ${{ env.FAILURE_REASON }}
            ```

            **Detailed Output (if available)**:
            ```
            ${{ env.DEPLOY_OUTPUT }}
            ```

            Please check the GitHub Actions logs for more details.
          include-details: "true"
          color-success: "##d73a49" # Green for success
          color-failure: "#8a0d04" # Red for failure
          color-cancelled: "#ffc107" # Yellow for cancelled

      - name: Delete SSH Key
        if: always()
        run: |
          echo "Cleaning up SSH key..."
          rm -f ~/.ssh/id_rsa
          echo "SSH key deleted."
