sequenceDiagram
    actor Client
    participant Router
    participant Cont as OcrController
    participant Ocr as OcrService

    alt use coordinate of 3 rectangles
        rect rgb(144,193,255)
            Note right of Client: with body of image attached and<br>coordinate of 3 rectangles(left, top, width, height)
            Client->>Router: POST ocr/rectangles
            Note over Cont,Router: array of 3 rectangle coordinate
            Router->>Cont: get_stocks_data(image, rectangles)
            Cont->>Cont: verify if each rectangle are specified in correct format and<br>have 3 rectangles
            opt image not found
                Cont-->>Router: throw the error "image not found"
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 400, "image is required"
            end
            opt invalid image format
                Cont-->>Router: throw the error "invalid image format"
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 405, "invalid image format"
            end
            opt insufficient rectangle
                Cont-->>Router: throw the error "require 3 rectangles"
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 400, "require 3 rectangles"
            end
            opt rectangle format invalid 
                Cont-->>Router: throw the error "rectangle format invalid "
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 400, "rectangle format invalid"
            end
            Cont->>Ocr: extract_stock(image, rectArr)
            Ocr->>Ocr: do OCR
            Note over Ocr: process_text(textToProcess, whatToGet)<br>do RegEx to get whatToGet {"Symbol", "amont", "unitPrice"}
            Ocr->>Ocr: process_text(text, "Symbol")
            opt extract_stock Failed
                Ocr-->>Cont: throw any error
                Cont->>Cont: show error message in logging
                Cont-->>Router: throw the error "the error occured during extract_stock"
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 500, "the error occured during extract_stock"
            end
            Ocr->>Cont: return Array of Stock Data object<br>[{stock:XYZ, amount:200, unitPrice:25.25}, {...}, ...]
            Cont->>Router: return Array of Stock Data object<br>[{stock:XYZ, amount:200, unitPrice:25.25}, {...}, ...]
            Note over Router,Client: JSON Response: {status_code, message, data(if any)}
            Router->>Client: 200, "get stock data successful", data: {stocks: [{...}, {...}, ...]}
        end
    else use a screenshot
        rect rgb(144,255,166)
            Note right of Client: with body of screenshot
            Client->>Router: POST ocr/shot
            Router->>Cont: get_stocks_data(image)
            Cont->>Cont: verify if each rectangle are specified in correct format and<br>have 3 rectangles
            opt image not found
                Cont-->>Router: throw the error "image not found"
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 400, "image is required"
            end
            opt invalid image format
                Cont-->>Router: throw the error "invalid image format"
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 405, "invalid image format"
            end
            Note over Cont, Ocr: use image width in percent to specify the rectangle
            Cont->>Ocr: extract_text(image)
            Ocr->>Ocr: do OCR
            Note over Ocr: process_text(textToProcess, whatToGet)<br>do RegEx to get whatToGet {"Symbol", "amont", "unitPrice"}
            Ocr->>Ocr: process_text(text, "Symbol")
            opt extract_stock Failed
                Ocr-->>Cont: throw any error
                Cont->>Cont: show error message in logging
                Cont-->>Router: throw the error "the error occured during extract_stock"
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 500, "the error occured during extract_stock"
            end
            Ocr->>Cont: return Array of Stock Data object<br>[{stock:XYZ, amount:200, unitPrice:25.25}, {...}, ...]
            Cont->>Router: return Array of Stock Data object<br>[{stock:XYZ, amount:200, unitPrice:25.25}, {...}, ...]
            Note over Router,Client: JSON Response: {status_code, message, data(if any)}
            Router->>Client: 200, "get stock data successful", data: {stocks: [{...}, {...}, ...]}
        end
    end

