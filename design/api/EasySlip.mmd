sequenceDiagram
    Actor Client
    participant Router as ThirdPartyAPIRouter
    participant Cont as ThirdPartyAPIController
    participant ApiClient as ExternalAPIServiceExternalAPIService
    Actor Api as EasySlipApi
    %% EASYSLIP_API document = "https://developer.easyslip.com/document"

    %% add EASYSLIP_API_URL = "https://developer.easyslip.com/api/v1"<br>to .env
    %% add EASYSLIP_API_KEY from Easy api to .env
    
    ApiClient->>ApiClient: load EASYSLIP_API_URL from .env
    ApiClient->>ApiClient: load EASYSLIP_API_KEY from .env
    alt get EasyAlip quota information
        rect rgb(124,255,236)
        Client->>Router: GET /slip/quota
        Router->>Cont: check_slip_api_availability()
        Cont->>ApiClient: fetch_quota_information()
        ApiClient->>ApiClient: add EASYSLIP_API_KEY from .env to Header
        ApiClient->>Api: GET /me
        opt API unavailable
                Api-->>ApiClient: 500, any error
                ApiClient-->>Cont: throw error "API service unavailable"
                Cont-->>Router: return error "API service unavailable"
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router->>Client: 503, "API service unavailable"
            end
        Api->>ApiClient: Return quota information object
        opt any error
            ApiClient-->>Cont: throw any error
            Cont->>Cont: show error message in logging
            Cont-->>Router: throw the error "internal server error"
            Note over Router,Client: JSON Response: {status_code, message, data(if any)}
            Router-->>Client: 500, "internal server error"
        end
        ApiClient->>Cont: Return quota information
        opt remainingQuota < 10
            Cont->>Router: return False, {"remainingQuota": X}
            Note over Router,Client: JSON Response: {status_code, message, data(if any)}
            Router->>Client: 403, "slipApi is out of service", data: {status: "unavailable",<br>"remainingQuota":remainingQuota}
        end
        Cont->>Router: return true, {"remainingQuota": X}
        Note over Router,Client: JSON Response: {status_code, message, data(if any)}
        Router->>Client: 200, "slipApi is availiable", data: {status: "available",<br>"remainingQuota":remainingQuota} 

        end
    else get slip data
        rect rgb(188,191,50)
            Client->>Router: POST /slip/
            Router->>Cont: extract_slip_data(image)
            Cont->>Cont: verify if image was attached
            opt image not found
                Cont-->>Router: throw error "slip image not found"
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router->>Client: 400, "slip image not found"
            end
            Cont->>Cont: this.check_slip_api_availability()
            opt if data.status == "available"
            Cont->>ApiClient: verify_slip(base64Image)
            ApiClient->>ApiClient: add EASYSLIP_API_KEY from .env to Header
            ApiClient->>Api: POST /verify
            end 
            opt API unavailable
                Api-->>ApiClient: 500, any error
                ApiClient-->>Cont: throw error "API service unavailable"
                Cont-->>Router: return error "API service unavailable"
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router->>Client: 503, "API service unavailable"
            end
            Api->>ApiClient: Return slip information object
            opt any error
                ApiClient-->>Cont: throw any error
                Cont->>Cont: show error message in logging
                Cont-->>Router: throw the error "internal server error"
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 500, "internal server error"
            end
            ApiClient->>Cont: Return slip information object
            Cont->>Router: return slip information object
            Note over Router,Client: JSON Response: {status_code, message, data(if any)}
            Router->>Client: 200, "extract slip data successful",data: {"slipInfo":slipInfoObject}
        end
    end