sequenceDiagram
    autonumber
    title genral Class Diagram
    Actor Client
    participant Routes
    participant Controller
    participant UserModel
    participant othersModel 
    participant Database

    Note over Client,Routes: with body {JWT token, ...}
    Client->>Routes: HTTP Request
    Routes->>Routes: verify method
    alt method not allow
        Note over Routes,Client: JSON Response: {status_code, message, data(if any)}
        Routes-->>Client: 405 Method Not Allowed
    else allow method
        Routes->>Controller: some_function(args, ...)
    end

    alt verify Parameters
        Controller->>Controller: verifying if parameters and body were exist?<br>very_body_param(...args)
        Controller-->>Routes: throw missing parameters or body
        Note over Routes,Client: JSON Response: {status_code, message, data(if any)}
        Routes-->>Client: 400 insufficieint arguments
    else authorization
        Note over Controller, UserModel: verify_client(token)<br/>to check if cilent was a user or not
        Controller->>UserModel: verify_client(token)
        UserModel->>UserModel: decode_token(token)
        UserModel->>UserModel: get_user(userId)
        UserModel->>Database: Perform database operation
        Database-->>UserModel: user object or empty
        alt Successful
            UserModel-->>Controller: return true
        else not found
            UserModel-->>Controller: return false
            Controller-->>Routes: throw Client unauthorized
            Note over Routes,Client: JSON Response: {status_code, message, data(if any)}
            Routes-->>Client: 401 Unauthorized
        end
    else Forbidden
        Note over UserModel: right_verify(user)<br/>to check if a user was allow to do a RUD operation<br/>eg. to modify/read a data, you need to be an owner
        Controller->>othersModel: right_verify(user)
        othersModel->>othersModel: verify if requested user is owner of accessing data
        alt successful
            othersModel-->>Controller: return true
        else User doesn't have right to access/modify
            othersModel-->>Controller: return false
            Controller-->>Routes: Indicate forbidden access
            Note over Routes,Client: JSON Response: {status_code, message, data(if any)}
            Routes-->>Client: 403 Forbidden
        end
    else Successful Operation
        Controller->>UserModel: some_method(args, ...)
        Note over UserModel,othersModel: TRY Block
        Note over UserModel,othersModel: CRUD Operation design individually for each entity
        opt Create
            UserModel->>UserModel: verify data is not null
            UserModel->>Database: Perform database operation
            Database-->>UserModel: operation successful 
            UserModel-->>Controller: RESULT: str = object created Id
        end
        opt Read one
            UserModel->>UserModel: verify id is not null
            Note over UserModel: function general_query_function(findOneorMany, query, sort)<br/>query: object<br/>sort: enum(asc, desc)
            UserModel->>UserModel: general_query_function(One, query, sort)
            UserModel->>Database: Perform database operation
            Database-->>UserModel: operation successful
            UserModel-->>Controller: RESULT: obj = read data object {...}
        end
        opt Read all
            UserModel->>UserModel: general_query_function(Many, query, sort)
            UserModel->>Database: Perform database operation
            Database-->>UserModel: operation successful
            UserModel-->>Controller: RESULT: arr = read array of object data [{...}, {...}, {...}, ...]
        end
        opt Update
            UserModel->>UserModel: verify id, dataToUpdate is not null 

            Note over UserModel:get a updating document to include the empty field<br/>in the incoming updating data object
            UserModel->>UserModel: general_query_function(One, id, None)
            UserModel->>Database: Perform database operation
            Database-->>UserModel: operation successful

            UserModel->>UserModel: include data into incoming updated data 

            Note over UserModel: do an updating operation
            UserModel->>UserModel: update_one(id)
            UserModel->>Database: Perform database operation
            Database-->>UserModel: operation successful

            Note over UserModel: get the updated document
            UserModel->>UserModel: general_query_function(One, id, None)
            UserModel->>Database: Perform database operation
            Database-->>UserModel: operation successful

            UserModel-->>Controller: RESULT: obj = updated object {...}
        end
        opt delete
            UserModel->>UserModel: verify id is not null
            Note over UserModel: do an deleting operation
            UserModel->>UserModel: delete_one(id)
            UserModel->>Database: Perform database operation
            Database-->>UserModel: operation successful
            UserModel-->>Controller: RESULT: bool = true
        end
        
        Controller-->>Routes: return message("<action> success") and data(if any) from model
        Note over Routes,Client: JSON Response: {status_code, message, data(if any)}
        Routes-->>Client: 200 OK with JSON response
    Note over Controller: CATCH Block
    else othersModel Operation Failed
        Controller->>othersModel: Request data (CRUD)
        othersModel->>Database: Perform database operation
        Database-->>othersModel: Operation fails
        othersModel-->>Controller: throw the error message.
        Controller-->>Routes: Pass error information
        Note over Routes,Client: JSON Response: {status_code, message, data(if any)}
        Routes-->>Client: Appropriate error code (e.g., 500 Internal Server Error)
    end