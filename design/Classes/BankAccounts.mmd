sequenceDiagram
    autonumber
    title Bank Accounts Using BaseController
    participant Client
    participant Router
    participant BankCont as BankController extends BaseController
    participant BankModel as BankAccountModel
    participant UserController

    alt create a new bank account
        rect rgb(73,204,144)
            Client->>Router: POST /bank/create
            Router->>Router: extract the body (whatever it has or doesn't have)<br> by body parser to parameters
            Router->>BankCont: create_bank_account(request)
            BankCont->>BankCont: verifyParams({displayName, bankAccountName, bankName, initialBalance})
            opt some parameter is null or empty
                BankCont-->>Router: throw the error "parameters are required"
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 400, "displayName, bankAccountName, bankName, and initialBalance are required"
            end
            BankCont->>UserController: get_current_user(request)
            opt get_current_user Failed
                UserController-->>BankCont: throw any error 
                BankCont->>BankCont: show error message in logging
                BankCont-->>Router: throw the error "error occurred during get_current_user"
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 500, "error occurred during get_current_user"
            end
            UserController->>BankCont: return user object {...}
            BankCont->>BankCont: create new bank account object with user id
            BankCont->>BankModel: create(newBankAccount: NewBankAccount)
            opt create Failed
                BankModel-->>BankCont: throw any error
                BankCont->>BankCont: show error message in logging
                BankCont-->>Router: throw the error "error occurred during create a new account"
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 500, "error occurred during create a new account"                
            end
            BankModel->>BankCont: return bank account created id
            opt any error
                BankCont-->>Router: throw the error "internal server error"
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 500, "internal server error"
            end
            BankCont->>Router: return bank account created id
            Note over Router,Client: JSON Response: {status_code, message, data(if any)}
            Router->>Client: 200, "create a new bank account successful", data: {id: id}
        end
    else read a bank account
        rect rgb(142,172,252)
            Note right of Client: search by id, fav, and userUniqueId
            Client->>Router: POST /bank/search
            Router->>Router: extract the body (whatever it has or doesn't have)<br> by body parser to parameters
            Router->>BankCont: search_bank_account(request)
            BankCont->>BankCont: verifyParams({searchCriteria, searchValue, isFindOne, sorting})
            opt some parameter is null or empty
                BankCont-->>Router: throw the error "parameters are required"
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 400, "searchCriteria, searchValue, isFindOne, and sorting are required"
            end
            BankCont->>BankModel: search({searchCriteria, searchValue, isFindOne, sorting})
            opt search Failed
                BankModel-->>BankCont: throw any error
                BankCont->>BankCont: show error message in logging
                BankCont-->>Router: throw the error "error occurred during search bank account(s)"
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 500, "error occurred during search bank account(s)"
            end
            BankModel->>BankCont: return bank account object{...}
            opt any error
                BankCont-->>Router: throw the error "internal server error"
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 500, "internal server error"
            end
            BankCont->>Router: return bank account object{...}
            Note over Router,Client: JSON Response: {status_code, message, data(if any)}
            Router->>Client: 200, "search bank account successful", data: {bank-account: {...}}
        end
    else read all bank accounts of current user
        rect rgb(152, 142, 232)
            Client->>Router: POST /bank/all
            Router->>Router: extract the body (whatever it has or doesn't have)<br> by body parser to parameters
            Router->>BankCont: get_current_user_all_bank_accounts(request)
            BankCont->>UserController: get_current_user(request)
            opt get_current_user Failed
                UserController-->>BankCont: throw any error 
                BankCont->>BankCont: show error message in logging
                BankCont-->>Router: throw the error "error occurred during get_current_user"
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 500, "error occurred during get_current_user"
            end
            UserController->>BankCont: return user object {...}
            BankCont->>BankModel: search({userUniqueId: user.id, isFindOne: false, sorting: "asc"})
            opt search Failed
                BankModel-->>BankCont: throw any error
                BankCont->>BankCont: show error message in logging
                BankCont-->>Router: throw the error "error occurred during search bank account(s)"
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 500, "error occurred during search bank account(s)"
            end
            BankModel->>BankCont: return array of bank account objects [{...}, {...}, ...]
            opt any error
                BankCont-->>Router: throw the error "internal server error"
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 500, "internal server error"
            end
            BankCont->>Router: return array of bank account objects [{...}, {...}, ...] 
            Note over Router,Client: JSON Response: {status_code, message, data(if any)}
            Router->>Client: 200, "search bank accounts successful" , data: {bank accounts: [{...},{...},{...},...]}
        end
    else update bank account
        rect rgb(252,182,142)
            Client->>Router: PUT  /bank/update
            Router->>Router: extract the body (whatever it has or doesn't have)<br> by body parser to parameters
            Router->>BankCont: update_bank_account(request, bankAccountUniqueId, updateData)
            BankCont->>BankCont: verifyParams({request, bankAccountUniqueId, updateData})
            opt some parameter is null or empty
                BankCont-->>Router: throw the error "parameters are required"
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 400, "request, bankAccountUniqueId, and updateData are required"
            end
            BankCont->>BankCont: verify_right_to_modify(request, bankAccountUniqueId)
            rect rgb(254,235,176)
                BankCont->>UserController: get_current_user(request)
                opt get_current_user Failed
                    UserController-->>BankCont: throw any error
                    BankCont->>BankCont: show error message in logging 
                    BankCont-->>Router: throw the error "error occurred during get_current_user"
                    Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                    Router-->>Client: 500, "error occurred during get_current_user"
                end
                UserController->>BankCont: return user object {...}
                BankCont->>BankModel: search({bankAccountUniqueId, isFindOne: true, sorting: "asc"})
                opt search Failed
                    BankModel-->>BankCont: throw any error
                    BankCont->>BankCont: show error message in logging
                    BankCont-->>Router: throw the error "error occurred during search bank account(s)"
                    Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                    Router-->>Client: 500, "error occurred during search bank account(s)"
                end
                BankModel->>BankCont: return bank account object{...}
                BankCont->>BankCont: verifying... (return True or False)
                opt current user not owner
                    BankCont-->>Router: throw the error "you are not allowed to modify this data"
                    Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                    Router-->>Client: 403, "you are not allowed to modify this data"
                end
            end
            BankCont->>BankCont: include bank account data that doesn't exist in the updateData<br>into updateData
            BankCont->>BankModel: update(bankAccountUniqueId, updateData)
            opt update Failed
                BankModel-->>BankCont: throw any error
                BankCont->>BankCont: show error message in logging
                BankCont-->>Router: throw the error "error occurred during update bank account"
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 500, "error occurred during update bank account"
            end
            BankModel->>BankCont: return updated bank account object{...}
            opt any error
                BankCont-->>Router: throw the error "internal server error"
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 500, "internal server error"
            end
            BankCont->>Router: return updated bank account object{...}
            Note over Router,Client: JSON Response: {status_code, message, data(if any)}
            Router->>Client: 200, "bank account updated successfully", data: {bank account: {...}}
        end
    else delete bank account
        rect rgb(247,155,155)
            Client->>Router: DELETE /bank/delete
            Router->>Router: extract the body (whatever it has or doesn't have)<br> by body parser to parameters
            Router->>BankCont: delete_bank_account(request, bankAccountUniqueId)
            BankCont->>BankCont: verifyParams({request, bankAccountUniqueId})
            opt some parameter is null or empty
                BankCont-->>Router: throw the error "parameters are required"
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 400, "request, and bankAccountUniqueId are required"
            end
            BankCont->>BankCont: verify_right_to_modify(request, bankAccountUniqueId)
            rect rgb(254,235,176)
                BankCont->>UserController: get_current_user(request)
                opt get_current_user Failed
                    UserController-->>BankCont: throw any error
                    BankCont->>BankCont: show error message in logging 
                    BankCont-->>Router: throw the error "error occurred during get_current_user"
                    Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                    Router-->>Client: 500, "error occurred during get_current_user"
                end
                UserController->>BankCont: return user object {...}
                BankCont->>BankModel: search({bankAccountUniqueId, isFindOne: true, sorting: "asc"})
                opt search Failed
                    BankModel-->>BankCont: throw any error
                    BankCont->>BankCont: show error message in logging
                    BankCont-->>Router: throw the error "error occurred during search bank account(s)"
                    Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                    Router-->>Client: 500, "error occurred during search bank account(s)"
                end
                BankModel->>BankCont: return bank account object{...}
                BankCont->>BankCont: verifying... (return True or False)
                opt current user not owner
                    BankCont-->>Router: throw the error "you are not allowed to modify this data"
                    Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                    Router-->>Client: 403, "you are not allowed to modify this data"
                end
            end
            BankCont->>BankModel: delete(bankAccountUniqueId)
            opt delete Failed
                BankModel-->>BankCont: throw any error
                BankCont->>BankCont: show error message in logging
                BankCont-->>Router: throw the error "error occurred during delete bank account"
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 500, "error occurred during delete bank account"
            end
            BankModel->>BankCont: return True
            opt any error
                BankCont-->>Router: throw the error "internal server error"
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 500, "internal server error"
            end
            BankCont->>Router: return True
            Note over Router,Client: JSON Response: {status_code, message, data(if any)}
            Router->>Client: 200, "delete successful"
        end
    end
