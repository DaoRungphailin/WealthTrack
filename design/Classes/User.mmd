sequenceDiagram
   title User Class
    participant Client
    participant Router
    participant BaseCont as BaseController
    participant UserController as UserController <br>extends BaseController
    participant BaseModel
    participant UserModel as UserModel <br>extends BaseModel
    participant Security

    alt create a new user
        rect rgb(73,204,144)
            Note over Router: with body of {username, email,<br/>Password, confirmPass}
            Client->>Router: POST /user/create
            Router->>Router: extract the body (whatever it have or don't have)<br> by body parser to parameters
            Router->>UserController: register(username, email,<br>Password, confirmPass)
            UserController->>BaseCont: this.verifyParams({username, email, password, confirmPass}, ['username', 'email', 'password', 'confirmPass'])
            opt some parameter is null or empty
                BaseCont-->>UserController: throw the error "<field> is required"
                UserController-->>Router: pass error to Router
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 400, "username, email,<br> Password, and confirmPass are required"
            end
            UserController->>UserController: verify password matched
            opt password and confirm password doesn't match
                UserController-->>Router: pass error to Router
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 400, "password and its confirm don't match"
            end
            UserController->>UserController: verify email format with Regex
            opt invalid email format 
                UserController-->>Router: pass error to Router
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 400, "invalid email"
            end
            UserController->>UserController: normalize an email and username to lowercase<br> this.normalize(email, username)
            UserController->>UserModel: verifyDuplicateUser(username, email)
            Note over BaseModel, Security: this.finds(Criteria: str, Value: str, sorting:{field, order})
            UserModel->>UserModel: verifying userName and eMail<br> if match any User
            UserModel->>BaseModel: this.finds("username", userName)
            opt found user with the same email and username
                BaseModel-->>UserModel: return user object {...}
                UserModel-->>UserController: throw the error "user duplicated"
                UserController-->>Router: pass error to Router
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 409, "Conflict found"
            end
            UserModel->>BaseModel: this.finds("email", email)
            UserModel->>UserController: return user empty object
            UserController->>UserController: hashing the password<br>bcrypt.hashpw(password, salt?)
            UserController->>UserController: create user object from parameters
            UserController->>UserController: add role fields to object
            UserController->>UserController: add member_since fields to newUser object
            Note over UserController, UserModel: New_User {userName, email, hashedPassword, role}
            UserController->>UserModel: createUser(newUser: New_User)
            UserModel->>BaseModel: this.create(newUser)
            opt Create user Failed
                BaseModel-->>UserModel: pass error to UserModel
                UserModel-->>UserController: pass error to UserController
                UserController->>UserController: show error message in logging
                UserController-->>Router: pass error to Router
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 500, "error occured during create a user"
            end
            UserModel->>UserController: return user created id: str
            opt any error
                UserController-->>Router: pass error to Router
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 500, "internal server error"
            end
            UserController->>Router: return user created id: str
            Note over Router,Client: JSON Response: {status_code, message, data(if any)}
            Router->>Client: 201, "user created", data: {id: userCreatedId}
        end
    else read current user
        rect rgb(142,172,252)
            Note over Router: with body of {request}
            Client->>Router: POST /user/current
            Router->>UserController: getCurrentUser(request)
            UserController->>BaseCont: this.isToken(request)
            opt cookie not found
                BaseCont-->>UserController: throw the error "mising token"
                UserController-->>Router: pass error to Router
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 401, "mising token"
            end
            UserController->>Security: Security.decode_token(token)
            opt cannot decode token
                Security-->>UserController: throw the error "token decode error"
                UserController-->>Router: pass error to Router
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 500, "error occured during get a current user"
            end
            Security->>UserController: return isExpired, user object {...}
            opt token is expired or user object is empty
                UserController-->>Router: pass error to Router
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                 Router-->>Client: 401, "Invalid token"
            end
            opt any error
                UserController-->>Router: pass error to Router
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 500, "internal server error"
            end
            UserController->>Router: return user object {...}
            Router->>Client: 200, "get current user success", data: {user: user}
        end
    else search users
        rect rgb(253,164,255)
            Note right of Client: Admin only
            Note over Router: with body of {searchCriteria, searchValue, isFindOne, sorting}
            Client->>Router:POST /user/search
            Router->>UserController: searchUser(searchCriteria, searchValue, isFindOne, sorting)
            UserController->>BaseCont: this.verifyParams({searchCriteria, searchValue, isFindOne, sorting}, ['searchCriteria', 'searchValue', 'isFindOne', 'sorting'])
            opt some parameter is null or empty
                BaseCont-->>UserController: throw the error "<field> is required"
                UserController-->>Router: pass error to Router
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 400, criteria, value,<br> isFindOne, and sorting are required"
            end
            UserController->>UserController: convert searchCriteria from parameter<br>to pre-defined criteria using if-else statement<br>for only permit to search with id, username, email,and memberSince
            opt searchCriteria not in this list id, username, email,and memberSince
                UserController-->>Router: pass error to Router
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 403, "specified searchCriteria not permit"
            end
            UserController->>UserModel: search("email", email)
            UserModel->>BaseModel: this.finds("email", email)
            opt search Failed
                BaseModel-->>UserModel: pass error to UserModel
                UserModel-->>UserController: pass error to UserController
                UserController->>UserController: show error message in logging
                UserController-->>Router: pass error to Router
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 500, "the error occured during search a user"
            end
            Note left of UserModel: return only non-sensitive data (user data: userUniqueId,<br>memberSince, userName, email))
            UserModel->>UserController: return array of user object [{...}, {...}, ...] 
            opt any error
                UserController-->>Router: pass error to Router
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 500, "internal server error"
            end
            UserController->>Router: return array of user object [{...}, {...}, ...] 
            Note over Router,Client: JSON Response: {status_code, message, data(if any)}
            Router->>Client: 200, "search user success", data: array of user object [{...}, {...}, ...] 
        end
    else update user
        rect rgb(255,214,153)
            Note over Router: with body of {id, updatesData} and Authorization header with a token
            Client->>Router: PUT /user/update
            Router->>Router: extract body and headers
            Router->>UserController: updateUser(id, updatesData)
            UserController->>BaseCont: this.verifyParams({id, updatesData}, ['id', 'updatesData'])
            opt some parameter is null or empty
                BaseCont-->>UserController: throw the error "<field> is required"
                UserController-->>Router: pass error to Router
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 400, "id and updatesData are required"
            end
            UserController->>BaseCont: this.isToken(request)
            opt cookie not found
                BaseCont-->>UserController: throw the error "missing token"
                UserController-->>Router: pass error to Router
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 401, "missing token"
            end
            UserController->>Security: Security.decode_token(token)
            opt cannot decode token
                Security-->>UserController: throw the error "token decode error"
                UserController-->>Router: pass error to Router
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 500, "error occured during token decode"
            end
            Security->>UserController: return isExpired, user object {...}
            opt token is expired or user object is empty
                UserController-->>Router: pass error to Router
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 401, "Invalid token"
            end
            UserController->>UserModel: findById(id)
            UserModel->>BaseModel: this.findById("id", id)
            opt user not found
                UserModel-->>UserController: throw the error "user not found"
                UserController-->>Router: pass error to Router
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 404, "user not found"
            end
            UserModel->>UserController: return user object {...}
            UserController->>UserController: this.verifyRightToModify(request, id)
            opt permission denied
                UserController-->>Router: pass error to Router
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 403, "permission denied"
            end
            UserController->>UserModel: updateUser(user, updates)
            opt update Failed
                UserModel-->>UserController: pass error to UserController
                UserController->>UserController: show error message in logging
                UserController-->>Router: pass error to Router
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 500, "error occured during update user"
            end
            UserModel->>UserController: return updated user object {...}
            opt any error
                UserController-->>Router: pass error to Router
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 500, "internal server error"
            end
            UserController->>Router: return updated user object {...}
            Router->>Client: 200, "user updated", data: {user: updatedUser}
        end
    else delete user
        rect rgb(255,153,153)
            Note over Router: with body of {id} and Authorization header with a token
            Client->>Router: DELETE /user/delete
            Router->>Router: extract body and headers
            Router->>UserController: deleteUser(id)
            UserController->>BaseCont: this.verifyParams({id}, ['id'])
            opt some parameter is null or empty
                BaseCont-->>UserController: throw the error "<field> is required"
                UserController-->>Router: pass error to Router
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 400, "id is required"
            end
            UserController->>BaseCont: this.isToken(request)
            opt cookie not found
                BaseCont-->>UserController: throw the error "missing token"
                UserController-->>Router: pass error to Router
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 401, "missing token"
            end
            UserController->>Security: Security.decode_token(token)
            opt cannot decode token
                Security-->>UserController: throw the error "token decode error"
                UserController-->>Router: pass error to Router
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 500, "error occured during token decode"
            end
            Security->>UserController: return isExpired, user object {...}
            opt token is expired or user object is empty
                UserController-->>Router: pass error to Router
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 401, "Invalid token"
            end
            UserController->>UserModel: findById(id)
            opt user not found
                UserModel-->>UserController: throw the error "user not found"
                UserController-->>Router: pass error to Router
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 404, "user not found"
            end
            UserModel->>UserController: return user object {...}
            UserController->>UserController: this.verifyRightToModify(request, id)
            opt permission denied
                UserController-->>Router: pass error to Router
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 403, "permission denied"
            end
            UserController->>UserModel: deleteUser(user)
            opt delete Failed
                UserModel-->>UserController: pass error to UserController
                UserController->>UserController: show error message in logging
                UserController-->>Router: pass error to Router
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 500, "error occured during delete user"
            end
            opt any error
                UserController-->>Router: pass error to Router
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 500, "internal server error"
            end
            UserController->>Router: return success message
            Router->>Client: 200, "user deleted"
        end
    end
