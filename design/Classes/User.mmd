sequenceDiagram
   title User Class
    participant Client
    participant Routes
    participant Controller
    participant UserModel
    participant Security
    

    alt create a new user
        rect rgb(73,204,144)
            Note over Routes: with body of {username, email,<br/>Password, confirmPass}
            Client->>Routes: POST /user/create
            Routes->>Routes: extract the body (whatever it have or don't have)<br> by body parser to parameters
            Routes->>Controller: register(username, email,<br>Password, confirmPass)
            Controller->>Controller: verify all pameters is not null 
            opt some parameter is null or empty
                Controller-->>Routes: throw the error "parameters is required"
                Note over Routes,Client: JSON Response: {status_code, message, data(if any)}
                Routes-->>Client: 400, "username, email,<br> Password, and confirmPass are required"
            end
            Controller->>Controller: verify password matched
            opt password and confirm password doesn't match
                Controller-->>Routes: throw the error "password don't match"
                Note over Routes,Client: JSON Response: {status_code, message, data(if any)}
                Routes-->>Client: 400, "password and its confirm don't match"
            end
            Controller->>Controller: verify email format
            opt invalid email format 
                Controller-->>Routes: throw the error "invalid email"
                Note over Routes,Client: JSON Response: {status_code, message, data(if any)}
                Routes-->>Client: 400, "invalid email"
            end
            Controller->>UserModel: duplicate user verifying<br>get_user(username, email)
            Note over UserModel: this.find(searchCriteria: str, searchValue: str, one: <True, False>bool,<br> sorting: <"asc", "desc">Sort)
            UserModel->>UserModel: verifying userName and eMail<br> if match any user<br>this.find("username", userName, True, "asc")<br>this.find("email, eMail, True, "asc")
            opt found user with the same email and username
                UserModel-->>Controller: return user object {...}
                Controller-->>Routes: throw the error "user duplicated"
                Note over Routes,Client: JSON Response: {status_code, message, data(if any)}
                Routes-->>Client: 409, "Conflict found"
            end
            UserModel->>Controller: return user empty object
            Controller->>Controller: hashing the password<br>bcrypt.hashpw(password, salt?)
            Controller->>Controller: normalize an email and username to lowercase<br> this.normalize(email, username)
            Controller->>Controller: create user object from parameters
            Controller->>Controller: add member_since,and role fields to object
            Note over Controller, UserModel: New_User {userName, email, hashedPassword,<br>role, memberSince}
            Controller->>UserModel: create(newUser: New_User)
            UserModel->>UserModel: db.collection(User).insertOne(newUser)
            opt Created user Failed
                UserModel-->>Controller: throw any error
                Controller-->>Routes: throw the error "error occured when creating a user"
                Note over Routes,Client: JSON Response: {status_code, message, data(if any)}
                Routes-->>Client: 500, "error occured when creating a user"
            end
            UserModel->>Controller: user created id: str
            opt any error
                Controller-->>Routes: throw the error "internal server error"
                Note over Routes,Client: JSON Response: {status_code, message, data(if any)}
                Routes-->>Client: 500, "internal server error"
            end
            Controller->>Routes: return user created id: str
            Note over Routes,Client: JSON Response: {status_code, message, data(if any)}
            Routes->>Client: 201, "user created", {id: userCreatedId}
        end
    else read current user
        rect rgb(142,172,252)
            Note over Routes: with body of {request}
            Client->>Routes: POST /user/current
            Routes->>Routes: extract the body (whatever it have or don't have)<br> by body parser to parameters
            Routes->>Controller: get_current_user(request)
            Controller->>Controller: extract the token from cookie<br>in the request
            opt cookie not found
                Controller-->>Routes: throw the error "mising token"
                Note over Routes,Client: JSON Response: {status_code, message, data(if any)}
                Routes-->>Client: 401, "mising token"
            end
            Controller->>Security: Security.decode_token(token)
            opt cannot decode token
                Security-->>Controller: throw the error "token decode error"
                Controller-->>Routes: throw the error "error occured when getting a current user"
                Note over Routes,Client: JSON Response: {status_code, message, data(if any)}
                Routes-->>Client: 500, "error occured when getting a current user"
            end
            Security->>Controller: return isExpired, user object {...}
            opt token is expired or user object is empty
                Controller-->>Routes: throw the error "Invalid token"
                Note over Routes,Client: JSON Response: {status_code, message, data(if any)}
                 Routes-->>Client: 401, "Invalid token"
            end
            opt any error
                Controller-->>Routes: throw the error "internal server error"
                Note over Routes,Client: JSON Response: {status_code, message, data(if any)}
                Routes-->>Client: 500, "internal server error"
            end
            Controller->>Routes: return user object {...}
            Routes->>Client: 200, "get current user success",{user: user}
        end
    else read users
        rect rgb(253,164,255)
            Note right of Client: Adnim only
            Note over Routes: with body of {searchCriteria, searchValue, findOne, sorting}
            Client->>Routes:POST /users/    
    end
    else update current user
        rect rgb(252,182,142)
            Note over Routes: with body of {Id,dataObject}
            Client->>Routes: PUT /user
            Routes->>Routes: extract the body (whatever it have or don't have)<br> by body parser to parameters
            Routes->>Controller: update_current_user(request, updatedUserData)
            Controller->>Controller: verify updatedUserData is not null
            opt updatedUserData is null or empty
                Controller-->>Routes: throw the error "parameters is required"
                Note over Routes,Client: JSON Response: {status_code, message, data(if any)}
                Routes-->>Client: 400, "updatedUserData is required"
            end
            Note right of  Controller: as the get_current_user was defined in "read current user"
            Controller->>Controller: this.get_current_user(request)
            Controller->>Controller: include current user data that doesn't exist in the updatedUserData<br>into updatedUserData
            Controller->>Controller: normalize an email and username to lowercase<br> this.normalize(email, username)
            Controller->>UserModel: update(db, userId, updatedUserData)
            opt
                UserModel-->>Controller: throw any error
                Controller-->>Routes: throw the error "error occured during update user"
                Note over Routes,Client: JSON Response: {status_code, message, data(if any)}
                Routes-->>Client: 500, "error occured during update user"
            end
            UserModel->>Controller: return True
            Controller->>Routes: return True
            Note over Routes,Client: JSON Response: {status_code, message, data(if any)}
            Routes->>Client: 200, "user updated"
        end
    else delete a user
        rect rgb(247,155,155)
            Note over Routes: with body of {Id}
            Client->>Routes: DELETE /user
            Routes->>Routes: extract the body (whatever it have or don't have)<br> by body parser to parameters
            Routes->>Controller: delete_user(userId)
            Controller->>Controller: verify userId is not null
            opt userId is null or empty
                Controller-->>Routes: throw the error "parameter is required"
                Note over Routes,Client: JSON Response: {status_code, message, data(if any)}
                Routes-->>Client: 400, "userId is required"
            end
        end

    end 
    