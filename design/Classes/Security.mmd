sequenceDiagram
    title Security Class
    participant Client
    participant Router
    participant SecurityController
    participant UserModel
    participant Security
    

    alt logging in
        rect rgb(97,175,254)
            Note over Router, SecurityController: the log in endpoint can receive either email or username
            Note over Router, Client: with body of {username, email,Password, confirmPass}
            Client->>Router: POST /user/login
            Router->>Router: extract the body (whatever it have or don't have)<br> by body parser to parameters
            Router->>SecurityController: login (username, password)
            SecurityController->>SecurityController: verify all pameters is not null 
            opt some parameter is null or empty
                SecurityController-->>Router: throw the error "parameters is required"
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 400, "username and password are required"
            end
            Note right of  SecurityController: as the check_password was defined in UserModel
            SecurityController->>UserModel: User.check_password(db, userName.lower(), password)
            opt password check Failed
                UserModel-->>SecurityController: return False
                SecurityController-->>Router: throw the error "password invalid"
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 401, unauthorized
            end
            UserModel->>SecurityController: return True
            SecurityController->>Security: Security.create_token(user)
            opt cannot create token
                Security-->>SecurityController: throw any error
                SecurityController->>SecurityController: show error message in logging
                SecurityController-->>Router: throw the error "error occured when logging in"
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 500, "error occured when logging in"
            end
            Security->>SecurityController: return token
            opt any error
                SecurityController-->>Router: throw the error "internal server error"
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 500, "internal server error"
            end
            SecurityController->>Router:retun token
            Note over Router,Client: JSON Response: {status_code, message, data(if any)}
            Note right of Router: the token might be send in<br> Header with "Barear " prefix
            Router->>Client: 200, login successful, data: {token: token}
        end
    
    else log out
        rect rgb(247,155,155)
            Client->>Router: POST /user/logout
            Router->>SecurityController: logout()
            %% delete token in the cookie is when for not enable cors but this Application enable cors, examine this condition
            SecurityController->>SecurityController: delete token in the cookie <br>or blank the token in the cookie
            opt
                SecurityController-->>Router: throw the error "error occured during logging out"
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 500, "error occured when logging out"
            end
            opt any error
                SecurityController-->>Router: throw the error "internal server error"
                SecurityController->>SecurityController: show error message in logging
                Note over Router,Client: JSON Response: {status_code, message, data(if any)}
                Router-->>Client: 500, "internal server error"
            end
            SecurityController->>Router: return True
            Note over Router,Client: JSON Response: {status_code, message, data(if any)}
            Router-->>Client: 200, "logout success"
        end

    end 
    