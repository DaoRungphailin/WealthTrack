sequenceDiagram
    autonumber
    title General Request Handling Flow with BaseController and BaseModel
    participant Client
    participant Router
    participant BaseController
    participant SpecificController as SpecificController extends BaseController
    participant BaseModel
    participant SpecificModel as SpecificModel extends BaseModel
    participant UserModel
    participant Database
    %% alt เลือกทำอย่างใดอย่างหนึ่ง
    %% opt จะทำหรือไม่ทำก็ได้

    %% Client makes an HTTP request
    Client->>Router: HTTP Request

    %% Router verifies the HTTP method
    opt verify method
        Router->>Router: verifyMethod
        Note over Router,Client: JSON Response: {status_code, message, data(if any)}
        Router-->>Client: 405 Method Not Allowed
    end

    %% Router handles the request and forwards it to the SpecificController
    Router->>SpecificController: call specific method (e.g., createEntity)

    %% SpecificController verifies the request body for a cookie token
    SpecificController->>BaseController: isToken(request)
    BaseController->>BaseController: if(request.cookies.token)
    opt Cookie not found
        BaseController-->>SpecificController: throw error missing token in the body
        SpecificController-->>Router: pass error to Router
        Note over Router,Client: JSON Response: {status_code, message, data(if any)}
        Router-->>Client: 400 insufficient arguments
    end
    
    %% SpecificController verifies parameters using BaseController method
    SpecificController->>BaseController: verifyParams(params)
    opt some parameter is null or empty
        BaseController-->>SpecificController: throw the error "${key} are required"
        SpecificController-->>Router: pass error to Router
        Note over Router,Client: JSON Response: {status_code, message, data(if any)}
        Router-->>Client: 400, "${key} are required"
    end

    %% SpecificController verifies user authorization
    Note over SpecificController: verifyClient(token)<br/>to check if client is a user or not
    SpecificController->>UserModel: verifyClient(request.cookies.token)
    UserModel->>UserModel: this.decodeToken(token)
    UserModel->>UserModel: this.getUserById(userId)
    UserModel->>Database: Perform database operation
    opt not found
        Database-->>UserModel: return empty object
        UserModel-->>SpecificController: return false
        SpecificController-->>Router: throw Client unauthorized
        Note over Router,Client: JSON Response: {status_code, message, data(if any)}
        Router-->>Client: 401 Unauthorized
    end
    Database->>UserModel: return user object
    UserModel->>SpecificController: return true

    %% SpecificController verifies user permissions
    SpecificController->>BaseController: verifyRightToModify(request, entityId)
    opt permission denied
        BaseController-->>SpecificController: throw the error "permission denied"
        SpecificController-->>Router: pass error to Router
        Note over Router,Client: JSON Response: {status_code, message, data(if any)}
        Router-->>Client: 403, "permission denied"
    end

    %% SpecificController prepares data and calls SpecificModel
    SpecificController->>SpecificModel: perform CRUD operation (e.g., create, read, update, delete)

    %% SpecificModel performs operation and interacts with Database
    SpecificModel->>BaseModel: performOperation(operation, params)
    BaseModel->>Database: Perform database operation
    alt operation successful
        Database-->>BaseModel: return result
        BaseModel-->>SpecificModel: return result
        SpecificModel-->>SpecificController: return result
        SpecificController-->>Router: return result
        Note over Router,Client: JSON Response: {status_code, message, data(if any)}
        Router->>Client: 200, "operation successful", data: {result}
    else operation failed
        Database-->>BaseModel: return error
        BaseModel-->>SpecificModel: throw error
        SpecificModel-->>SpecificController: throw error
        SpecificController-->>Router: pass error to Router
        Note over Router,Client: JSON Response: {status_code, message, data(if any)}
        Router-->>Client: 500, "operation failed", error: {error}
    end
