%%{init: {'themeVariables': {'lineColor': '#ff0000', 'dashedLineColor': '#00ff00'}}}%%
classDiagram
    direction RL
    class Errors {
        +AppError(message: string)
        +BadRequestError(message: string)
        +UnauthorizedError(message: string)
        +ForbiddenError(message: string)
        +NotFoundError(message: string)
        +ConflictError(message: string)
        +PasswordError()
        +UserDuplicateError()
    }

    class Error {
        <<JS built-in>>
    }

    Error <|-- Errors

    class Middleware {
        +methodValidator(req: Request, res: Response, next: NextFunction) void
        +checkAdmin(req: Request, res: Response, next: NextFunction) boolean
        +errorHandler(err: Error, req: Request, res: Response, next: NextFunction) void
        +responseHandler(req: Request, res: Response, next: NextFunction) void
        +formatResponse(status_code, message, data) Object
    }

    class BaseController {
        +verifyFields(data: Object, requiredFields[]: string) boolean
        +getCurrentUser(req: Request) User
        +verifyOwnership(user: User, data[]: Object) boolean
    }

    class BaseModel {
        -tableName: string
        +constructor(tableName: string)
        +validateSchema(data: Object) boolean
        +create(userEmail: string, data: Object) Promise~string~
        +findAll(userEmail: string) Promise~Object[]~
        +findOne(key[]: string) Promise~Object~
        +update(key[]: string, Data: Object) Promise~Object~
        +delete(key[]: string) Promise~boolean~
    }

    class PgClient{
        -pool
        -client 
        -transactionStarted 
        +constructor()
        +connect() Promise~void~
        +isConnect() boolean
        +beginTransaction() Promise~void~
        +commitTransaction() Promise~void~
        +rollbackTransaction() Promise~void~
        +query(sql: string, params[]) Promise~QueryResult~
        +release() void
    }

    class Redis{
        +constructor()
        +set(key: string, value: string) Promise~void~
        +get(key: string) Promise~string~
    }

    class UserController {
        +register(req: Request, res: Response, next: NextFunction) Promise~void~
        +getUser(req: Request, res: Response, next: NextFunction) Promise~void~
        +updateUser(req: Request, res: Response, next: NextFunction) Promise~void~
        +deleteUser(req: Request, res: Response, next: NextFunction) Promise~void~
    }
    class UserModel {
        +constructor()
        -hashPassword(plainPassword: string) Promise~string~
        +checkPassword(userEmail: string, EnteredPassword: string) Promise~boolean~
        +createUser(userData: Object) Promise~string~
        +findUser(userEmail: string) Promise~Object~
        +updateUser(userEmail: string, userData: Object) Promise~Object~
    }

    class BankAccountController {
        +createBankAccount(req: Request, res: Response, next: NextFunction) Promise~void~
        +getAllBankAccounts(req: Request, res: Response, next: NextFunction) Promise~void~
        +getOneBankAccount(req: Request, res: Response, next: NextFunction) Promise~void~
        +updateBankAccount(req: Request, res: Response, next: NextFunction) Promise~void~
        +deleteBankAccount(req: Request, res: Response, next: NextFunction) Promise~void~
    }
    class BankAccountModel {
        +constructor()
    }

    class TransactionController {
        +createTransaction(req: Request, res: Response, next: NextFunction) Promise~void~
        +getAllTransactions(req: Request, res: Response, next: NextFunction) Promise~void~
        +getOneTransaction(req: Request, res: Response, next: NextFunction) Promise~void~
        +updateTransaction(req: Request, res: Response, next: NextFunction) Promise~void~
        +deleteTransaction(req: Request, res: Response, next: NextFunction) Promise~void~
    }
    class TransactionModel {
        +constructor()
        -cacheTransactionDetail(transactionUuid: string) Promise~void~
        +createTransaction(userEmail: string, data: Object) Promise~string~
        +findTransactionDetail(transactionUuid: string) Promise~Object~
        +updateTransaction(transactionUuid: string,  data: Object) Promise~Object~
        +deleteTransaction(transactionUuid: string) Promise~boolean~
    }

    class DebtController {
        +createDebt(req: Request, res: Response, next: NextFunction) Promise~void~
        +getAllDebts(req: Request, res: Response, next: NextFunction) Promise~void~
        +getOneDebt(req: Request, res: Response, next: NextFunction) Promise~void~
        +updateDebt(req: Request, res: Response, next: NextFunction) Promise~void~
        +deleteDebt(req: Request, res: Response, next: NextFunction) Promise~void~
    }
    class DebtModel {
        +constructor()
    }

    class ThirdPartyAPIController {
        +getQuotaInformation(req: Request, res: Response, next: NextFunction) Promise~void~
        +extractSlipData(req: Request, res: Response, next: NextFunction) Promise~void~
    }

    class EasySlipService {
        -EASYSLIP_API_URL: string
        -EASYSLIP_API_KEY: string
        +constructor()
        +fetchQuotaInformation() Promise~Object~
        +checkSlipApiAvailability() Promise~boolean~
        +verifySlip(base64Image: string) Promise~Object~
    }

    BaseController <|-- UserController
    BaseController <|-- BankAccountController
    BaseController <|-- TransactionController
    BaseController <|-- DebtController
    BaseController <|-- ThirdPartyAPIController

    BaseModel <|-- UserModel
    BaseModel <|-- BankAccountModel
    BaseModel <|-- TransactionModel
    BaseModel <|-- DebtModel

    UserController *-- UserModel
    BankAccountController *-- BankAccountModel
    TransactionController *-- TransactionModel
    DebtController *-- DebtModel

    PgClient <|-- BaseModel
    TransactionController *-- PgClient

    UserController o-- Middleware
    BankAccountController o-- Middleware
    TransactionController o-- Middleware
    DebtController o-- Middleware
    ThirdPartyAPIController o-- Middleware

    UserController o-- Errors
    BankAccountController o-- Errors
    TransactionController o-- Errors
    DebtController o-- Errors
    ThirdPartyAPIController o-- Errors

    TransactionModel *-- Redis
    TransactionModel *-- BankAccountModel

    ThirdPartyAPIController *-- EasySlipService

    UserModel "1" -- "many" BankAccountModel : manages
    UserModel "1" -- "many" DebtModel : owns
    UserModel "1" -- "many" TransactionModel : performs
    DebtModel "0.1" -- "many" TransactionModel : associated with
    TransactionModel "many" -- "1..2" BankAccountModel : involves