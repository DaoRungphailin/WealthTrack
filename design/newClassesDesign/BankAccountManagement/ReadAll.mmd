%%{
    init: {
        "theme":"neutral",
        "themeVariables": {
            'labelBoxBorderColor': '#ff0000'
        },
        "sequence": { 
            "wrap": true, 
            "width": 200 
        } 
    }
}%%
sequenceDiagram
    participant Client
    participant Sec as Security
    participant Router as BankRouter
    box orange Controller
        participant BaseCont as BaseController
        participant Cont as BankAccountController extends BaseController
    end
    participant PGClient as PostgreSQLClient
    participant BaseModel as BaseModel 
    participant Model as BankAccountModel extends BaseModel
    participant DB as [(Database)]

    Client->>+Router: GET /banks/ (get all bankAccount of user)
    Note over Sec, Router: this method defined in UserManagement/read.mmd
    Router->>+Sec: verifyToken(req)
    alt Token decode error | Token expired | Invalid token
        Sec-->>Router: next(new UnauthorizedError('Invalid credentials'))
        Router-->>Client: ğŸ”´401, "Could not validate credentials"
    end
    Sec-->>-Router: decoded user object 

    Note over Sec, Router: this method defined in UserManagement/create.mmd
    Router->>Router: MethodValidator(allowedMethods)
    opt path not available
        Router-->>Client: ğŸ”´404, "<path> not available"
    end
    opt method not allowed
        Router-->>Client: ğŸ”´405, "<method> not allowed for <path>"
    end
    Router->>+Cont: getAllBankAccounts(req, res, next)
    Note over Cont, BaseCont: this method defined in UserManagement/read.mmd
    Cont->>+BaseCont: getCurrentUser(req)
    BaseCont-->>-Cont: User data

    opt user not found
        Cont-->>Router: throw NotFoundError('User not found')
        Router-->>Client: ğŸ”´404, "User not found"
    end

    Cont->>+Model: findAll(userEmail)
    Model->>+BaseModel: pass call
    Note over BaseModel: this method defined in BankAccountManagement/create.mmd
    BaseModel->>BaseModel: validateSchema(data) 
    Note over BaseModel: also validate each input individually by Regex: as each type of input has its own pattern, specific requirements and constraints.
    opt missing required field || invalid type || RegEx does not match
        BaseModel-->>Model: throw new Error('<field> is invalid')
        Model-->>Cont: throw error
        Cont-->>Router: next(new BadRequestError(error.message))
        Router-->>Client: ğŸ”´400, "<error.message>"
    end
    Note over BaseModel: query with prepare Statements
    BaseModel->>BaseModel: query(sql, params)
    BaseModel->>+DB: do operation
    DB-->>-BaseModel: result
    opt any error occurred
        BaseModel-->>Model: throw Error
        Model-->>Cont: pass error
        Cont-->>Router: next(error)
        Router-->>Client: ğŸ”´500, "something went wrong"
    end
    BaseModel-->>-Model: return array of bank account objects
    Model-->>-Cont: pass results

    opt bank accounts not found
        Cont-->>Router: throw NotFoundError('Bank accounts not found')
        Router-->>Client: ğŸ”´404, "Bank accounts not found"
    end

    Note over Cont, BaseCont: ensure that verifyOwnership is support iteration array of object
    Cont->>+BaseCont: verifyOwnership(user, [bankAccounts])
    opt Bank account's user email does not match current user email
        BaseCont-->>Cont: return false
        Cont-->>Router: throw ForbiddenError('You are not allowed to access this resource')
        Router-->>Client: ğŸ”´403, "You are not allowed to access this resource"
    end
    BaseCont-->>-Cont: return true

    Cont->>Cont: formatResponse(200, 'Bank accounts retrieved successfully', { bankAccounts })
    Cont-->>-Router: return formatted response
    Router-->>-Client: ğŸŸ¢200, { status: 200, message: "Bank accounts retrieved successfully", data: { bankAccounts } }
