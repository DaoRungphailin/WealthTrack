%%{
    init: {
        "theme":"base",
        "themeVariables": {
            'labelBoxBorderColor': '#ff0000'
        },
        "sequence": { 
            "wrap": true, 
            "width": 200 
        } 
    }
}%%
sequenceDiagram
    participant Client
    participant Sec as Security
    participant Router as BankRouter
    participant BaseCont as BaseController
    participant Cont as BankAccountController extends BaseController
    participant MongoObject
    participant BaseModel as BaseModel extends MongoObject
    participant Model as BankAccountModel extends BaseModel

    Client->>+Router: POST /banks/ (create Bank Account)
    Note over Sec, Router: this method defined in UserManagement/read.mmd
    Router->>+Sec: Verify Token(token)
    alt if token is invalid
    Note over Sec: the token maybe in Header or Cookies. so this method try to extract the token from the request
        Sec->>Sec: extractToken(request)
    end
    Sec->>Sec: jwt.decode(token)
    opt Token decode error
        Note over Sec, Router: Use the same error class to ensure consistency of error messages 
        Sec-->>Router: throw CredentialsException()
        Router-->>Client: 401, "Could not validate credentials"
    end
    opt Token expired
        Sec-->>Router: throw CredentialsException()
        Router-->>Client: 401, "Could not validate credentials"
    end
    opt Invalid token
        Sec-->>Router: throw CredentialsException()
        Router-->>Client: 401, "Could not validate credentials"
    end
    Sec-->>-Router: decoded user object
    Note over Router : this method defined in UserManagement/create.mmd
    Router->>Router: MethodValidator(allowedMethods)
    opt path not available
        Router-->>Client: 401, "<path> not available"
    end
    opt method not allowed
        Router-->>Client: 405, "<method> not allowed for <path>"
    end
    Router->>+Cont: createBankAccount(req, res, next)
    Cont->>Cont: Destructuring req.body
    Note over Cont: requiredFields = ['displayName', 'accountName', 'accountNumber', 'bankName', 'accountType', 'initialBalance']
    Cont->>+BaseCont: verifyBody(req.body, requiredFields)
    opt missing required fields
        BaseCont-->>Cont: throw Error('<field> is required')
        Cont-->>Router: next(BadRequestError(error))
        Router-->>Client: 400, "<field> is required"
    end
    BaseCont->>-Cont: return true
    Note over Cont, BaseCont: this method defined in UserManagement/read.mmd
    Cont->>+BaseCont: getCurrentUser(req)
    BaseCont-->>-Cont: User data
    opt user not found
        Cont-->>Router: throw NotFoundError('User not found')
        Router-->>Client: 404, "User not found"
    end
    Cont->>Cont: Create new bank account data object with user._id
    Cont->>+Model: create(newBankAccount)
    Model->>+BaseModel: create(data)
    BaseModel->>BaseModel: validate()
    opt missing required field
        BaseModel-->>Model: throw Error
        Model-->>Cont: next(error)
        Cont-->>Router: next(error)
        Router-->>Client: 400, "<field> is required"
    end
    opt invalid type
        BaseModel-->>Model: throw Error
        Model-->>Cont: next(error)
        Cont-->>Router: next(BadRequestError(error.message))
        Router-->>Client: 400, <error.message>
    end
    opt if error creating user
        BaseModel-->>Model: throw Error
        Model-->>Cont: throw error
        alt error code == 11000
            Cont-->>Router: throw ConflictError()
            Router-->>Client: 409, "bank account number already exists"
        else any other error
            Cont-->>Router: next(error)
            Router-->>Client: 500, "something went wrong"
        end
    end
    BaseModel->>-Model: Save account to database
    Model->>-Cont: created account object
    Cont->>Cont: formatResponse(201, 'Bank account created successfully', { bankAccountId })
    Cont-->>-Router: Formatted response
    Router-->>-Client: 201, { status: 201, message: "Bank account created successfully", data: { bankAccountId } }