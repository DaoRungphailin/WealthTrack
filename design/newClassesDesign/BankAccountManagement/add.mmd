%%{
    init: {
        "theme":"base",
        "themeVariables": {
            'labelBoxBorderColor': '#ff0000'
        },
        "sequence": { 
            "wrap": true, 
            "width": 200 
        } 
    }
}%%
sequenceDiagram
    participant Client
    participant Sec as Security
    participant Router as BankRouter
    box orange Controller
        participant BaseCont as BaseController
        participant Cont as BankAccountController extends BaseController
    end
    participant PGClient as PostgreSQLClient
    participant BaseModel as BaseModel 
    participant Model as BankAccountModel extends BaseModel

    Client->>+Router: POST /bank-accounts/ (create Bank Account)
    Note over Sec, Router: this method defined in UserManagement/read.mmd
    Router->>+Sec: verifyToken(req)
    alt Token decode error | Token expired | Invalid token
        Sec-->>Router: next(new UnauthorizedError('Invalid credentials'))
        Router-->>Client: ğŸ”´401, "Could not validate credentials"
    end
    Sec-->>-Router: decoded user object 

    Note over Sec, Router: this method defined in UserManagement/create.mmd
    Router->>Router: MethodValidator(allowedMethods)
    opt path not available
        Router-->>Client: ğŸ”´404, "<path> not available"
    end
    opt method not allowed
        Router-->>Client: ğŸ”´405, "<method> not allowed for <path>"
    end
    
    Router->>+Cont: createBankAccount(req, res, next)
    Cont->>Cont: Destructuring req.body
    Note over Cont: requiredFields = ['bankAccountName', 'bankAccountDisplayName', 'bankAccountNumber', 'bankName', 'balance']
    Cont->>+BaseCont: verifyFieldFields(req.body, requiredFields)
    opt missing required fields
        BaseCont-->>Cont: throw new Error('<field> is required')
        Cont-->>Router: next(new BadRequestError(error.message))
        Router-->>Client: ğŸ”´400, "<field> is required"
    end
    BaseCont->>-Cont: return true
    
    Note over Cont, BaseCont: this method defined in UserManagement/read.mmd
    Cont->>+BaseCont: getCurrentUser(req)
    BaseCont-->>-Cont: return User object
    opt user not found
        Cont-->>Router: next(new NotFoundError('User not found'))
        Router-->>Client: ğŸ”´404, "User not found"
    end
    
    Cont->>Cont: Create new bank account data object with user.email
    Cont->>+Model: createBankAccount({ userEmail, bankAccountName, bankAccountDisplayName, bankName, bankAccountNumber, balance })
    Model->>+BaseModel: validateSchema(data) 
    
    opt missing required field or invalid type
        BaseModel-->>Model: throw new Error('<field> is invalid')
        Model-->>Cont: throw error
        Cont-->>Router: next(new BadRequestError(error.message))
        Router-->>Client: ğŸ”´400, "<error.message>"
    end
    opt SQL unique violation
        BaseModel-->>Model: throw new Error('duplicate key value')
        Model-->>Cont: throw new Error('Bank account number already exists')
        Cont-->>Router: next(new ConflictError(error.message))
        Router-->>Client: ğŸ”´409, "Bank account number already exists"
    end
    opt any other error
       BaseModel-->>Model: throw error
       Model-->>Cont: throw error
       Cont-->>Router: next(error)
       Router-->>Client: ğŸ”´500, "something went wrong"
    end

    BaseModel->>-Model: return new BankAccount
    Model->>-Cont: return createdBankAccount
    Cont->>Cont: formatResponse(201, 'Bank account created successfully', createdBankAccount)
    Cont-->>-Router: return formatted response
    Router-->>-Client: ğŸŸ¢201, { status: 201, message: "Bank account created successfully", data: createdBankAccount }
