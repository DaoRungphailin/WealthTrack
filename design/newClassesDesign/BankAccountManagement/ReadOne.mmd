%%{
    init: {
        "theme":"base",
        "themeVariables": {
            'labelBoxBorderColor': '#ff0000'
        },
        "sequence": { 
            "wrap": true, 
            "width": 200 
        } 
    }
}%%
sequenceDiagram
    participant Client
    participant Sec as Security
    participant Router as BankRouter
    box orange Controller
        participant BaseCont as BaseController
        participant Cont as BankAccountController extends BaseController
    end
    participant PGClient as PostgreSQLClient
    participant BaseModel as BaseModel 
    participant Model as BankAccountModel extends BaseModel

    Client->>+Router: GET /bank-accounts/:bankAccountId (get Bank Account by bankAccountId)
    Note over Sec, Router: this method defined in UserManagement/read.mmd
    Router->>+Sec: verifyToken(req)
    alt Token decode error | Token expired | Invalid token
        Sec-->>Router: next(new UnauthorizedError('Invalid credentials'))
        Router-->>Client: ğŸ”´401, "Could not validate credentials"
    end
    Sec-->>-Router: decoded user object 

    Note over Sec, Router: this method defined in UserManagement/create.mmd
    Router->>Router: MethodValidator(allowedMethods)
    opt path not available
        Router-->>Client: ğŸ”´404, "<path> not available"
    end
    opt method not allowed
        Router-->>Client: ğŸ”´405, "<method> not allowed for <path>"
    end
    Router->>+Cont: getOneBankAccount(req, res, next)
    Cont->>Cont: Destructoring parameters
    Note over Cont: requiredFields = ['bankAccountId']
    Cont->>+BaseCont: verifyField({bankAccountId}, requiredFields)
    BaseCont->>BaseCont: escapeHtml()
    opt missing required fields
        BaseCont-->>Cont: throw Error('<field> is required')
        Cont-->>Router: next(BadRequestError(error))
        Router-->>Client: ğŸ”´400, "<field> is required"
    end
    BaseCont->>-Cont: return true
    Note over Cont, BaseCont: this method defined in UserManagement/read.mmd
    Cont->>+BaseCont: getCurrentUser(req)
    BaseCont-->>-Cont: User data
    opt user not found
        Cont-->>Router: throw NotFoundError('User not found')
        Router-->>Client: ğŸ”´404, "User not found"
    end
    Cont->>+Model: findBankByKey(bankAccountNumber, bankAccountName)
    Model->>+BaseModel: findByKey(bankAccountNumber, bankAccountName)
    Note over BaseModel: query with prepare Statements
    BaseModel->>BaseModel: query()

    opt any error occurred
        BaseModel-->>Model: throw Error
        Model-->>Cont: pass error
        Cont-->>Router: next(error)
        Router-->>Client: ğŸ”´500, "something went wrong"
    end
    BaseModel-->>-Model: return bank account object
    Model-->>-Cont: pass result
    opt bank account not found
        Cont-->>Router: throw NotFoundError('Bank account not found')
        Router-->>Client: ğŸ”´404, "Bank account not found"
    end
    Cont->>+BaseCont: verifyOwnership(user, bankAccount)
    opt Bank account's user email does not match current user email
        BaseCont-->>Cont: return false
        Cont-->>Router: throw ForbiddenError('You are not allowed to access this resource')
        Router-->>Client: ğŸ”´403, "You are not allowed to access this resource"
    end
    BaseCont-->>-Cont: return true
    Cont->>Cont: formatResponse(200, 'Search successful', { bankAccount })
    Cont-->>-Router: Formatted response
    Router-->>-Client: ğŸŸ¢200, { status: 200, message: "Search successful", data: { bankAccount } }
