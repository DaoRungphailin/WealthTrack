%%{
    init: {
        "theme":"base",
        "themeVariables": {
            'labelBoxBorderColor': '#ff0000'
        },
        "sequence": { 
            "wrap": true, 
            "width": 200 
        } 
    }
}%%
sequenceDiagram
    participant Client
    participant Sec as Security
    participant Router
    participant BaseCont as BaseController
    participant Cont as BankAccountController extends BaseController
    participant Mongo as MongoObject
    participant BaseModel as BaseModel extends MongoObject
    participant Model as BankAccountModel extends BaseModel

    Client->>+Router: DELETE /banks/delete
    Note over Sec, Router: this method defined in UserManagement/read.mmd
    Router->>+Sec: Verify Token(token)
    alt if token is invalid
    Note over Sec: the token maybe in Header or Cookies. so this method try to extract the token from the request
        Sec->>Sec: extractToken(request)
    end
    Sec->>Sec: jwt.decode(token)
    opt Token decode error
        Note over Sec, Router: Use the same error class to ensure consistency of error messages 
        Sec-->>Router: throw CredentialsException()
        Router-->>Client: 401, "Could not validate credentials"
    end
    opt Token expired
        Sec-->>Router: throw CredentialsException()
        Router-->>Client: 401, "Could not validate credentials"
    end
    opt Invalid token
        Sec-->>Router: throw CredentialsException()
        Router-->>Client: 401, "Could not validate credentials"
    end
    Sec-->>-Router: decoded user object
    Note over Router : this method defined in UserManagement/create.mmd
    Router->>Router: MethodValidator(allowedMethods)
    opt path not available
        Router-->>Client: 401, "<path> not available"
    end
    opt method not allowed
        Router-->>Client: 405, "<method> not allowed for <path>"
    end
    Router->>+Cont: deleteBankAccount(requ, res, next)
    Note over Cont, BaseCont: requiredFields = ['bankAccountId']
    Cont->>+BaseCont: verifyBody(req.body, requiredFields)
    opt Missing or invalid parameters
        BaseCont-->>Cont: throw BadRequestError
        Cont-->>Router: next(error)
        Router-->>Client: 400, "Invalid delete parameters"
    end
    BaseCont->>-Cont: return true
    Note over Cont, BaseCont: this method defined in UserManagement/read.mmd
    Cont->>+BaseCont: getCurrentUser(req)
    BaseCont-->>-Cont: User data
    opt user not found
        Cont-->>Router: throw NotFoundError('User not found')
        Router-->>Client: 404, "User not found"
    end
    Cont->>+Model: findById(bankAccountId)
    Model->>+BaseModel: pass call
    BaseModel->>+Mongo: isValidObjectId(bankAccountId)
    opt invalid bankAccountId
        Mongo-->>BaseModel: false
        BaseModel-->>Model: throw Error('Invalid bankAccountId')
        Model-->>Cont: pass error
        Cont-->>Router: next(BadRequestError('Invalid bankAccountId'))
        Router-->>Client: 400, "Invalid bankAccountId"
    end
    Mongo-->>-BaseModel: true
    opt Bank account not found
        BaseModel-->>Model: return null
        Model-->>Cont: pass result
        Cont-->>Router: throw NotFoundError('Bank account not found')
        Router-->>Client: 404, "Bank account not found"
    end
    opt any error occurred
        BaseModel-->>Model: throw Error
        Model-->>Cont: pass error
        Cont-->>Router: next(error)
        Router-->>Client: 500, "something went wrong"
    end
    BaseModel->>-Model: return bank account object
    Model-->>-Cont: pass result
    Cont->>+BaseCont: verifyOwnership(user, bankAccount)
    opt Bank account's user id does not match current user id
        BaseCont-->>Cont: return false
        Cont-->>Router: throw ForbiddenError('You are not allowed to access this resource')
        Router-->>Client: 403, "You are not allowed to access this resource"
    end
    BaseCont-->>-Cont: return true
    Cont->>+Model: deleteById(bankAccountId)
    Model->>+BaseModel: pass call
    BaseModel->>+Mongo: isValidObjectId(bankAccountId)
    opt invalid bankAccountId
        Mongo-->>BaseModel: false
        BaseModel-->>Model: throw Error('Invalid bankAccountId')
        Model-->>Cont: pass error
        Cont-->>Router: next(BadRequestError('Invalid bankAccountId'))
        Router-->>Client: 400, "Invalid bankAccountId"
    end
    Mongo-->>-BaseModel: true
    BaseModel->>BaseModel: findByIdAndDelete(bankAccountId)
    opt any error
        BaseModel-->>Model: throw Error('Error deleting user')
        Model-->>Cont: pass error
        Cont-->>Router: next(error)
        Router-->>Client: 500, "something went wrong"
    end
    BaseModel-->>-Model: Deleted user
    Model-->>-Cont: pass result
    Cont->>Cont: formatResponse(200, 'Bank account deleted successfully')
    Cont-->>-Router: Formatted response
    Router-->>-Client: 200, { status: 200, message: "Bank account deleted successfully" }