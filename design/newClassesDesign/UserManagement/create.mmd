%%{
    init: {
        "theme":"base",
        "themeVariables": {
            'labelBoxBorderColor': '#ff0000'
        },
        "sequence": { 
            "wrap": true, 
            "width": 200 
        } 
    }
}%%
sequenceDiagram
    participant Client
    participant Sec as Security
    participant Router as UserRouter
    box orange Controller
        participant BaseCont as BaseController
        participant Cont as UserController extends BaseController
    end
    participant PGClient as PostgreSQLClient
    participant BaseModel as BaseModel 
    participant Model as UserModel extends BaseModel
    participant DB as [(Database)]

    %% Create User
    Client->>+Router: POST /users/ (create User)
    Note over Router: this method will be used in several places in the application
    Router->>Router: MethodValidator(allowedMethods)
    opt path not available
        Router-->>Client: ğŸ”´401, "<path> not available"
    end
    opt method not allowed
        Router-->>Client: ğŸ”´405, "<method> not allowed for <path>"
    end
    Router->>+Cont: register(req, res, next)
    Cont->>Cont: Destructuring req.body
    Note over Cont: requiredFields = ['username', 'email', 'password', 'confirmPassword']
    Cont->>+BaseCont: verifyField(req.body, requiredFields)
    Note over BaseCont: also type conversion eg. string -> decimal
    opt missing required fields
        BaseCont-->>Cont: throw BadRequestError('<field> is required')
        Cont-->>Router: next(error)
        Router-->>Client: ğŸ”´400, "<field> is required"
    end
    BaseCont->>-Cont: return true
    opt Passwords don't match
        Cont-->>Router: throw BadRequestError("Password don't match")
        Router-->>Client: ğŸ”´400, "Password don't match"
    end
    Cont->>Cont: validateEmail(email)
    opt Invalid email
        Cont-->>Router: throw BadRequestError("Invalid email")
        Router-->>Client: ğŸ”´400, "Invalid email"
    end
    Cont->>Cont: normalizeUsernameEmail(username, email)
    Cont->>+Model: createUser(newUserData)
    Model->>Model: _hashPassword(password)
    opt error hashing password
        Model-->>Cont: throw Error('Error hashing password')
        Cont-->>Router: next(error)
        Router-->>Client: ğŸ”´500, "something went wrong"
    end
    Note over Model, BaseModel: this method defined in BankAccountManagement/create.mmd, please reference to that diagram
    Model->>+BaseModel: create(data)
    BaseModel->>BaseModel: validateSchema(data) 
    Note over BaseModel: also validate each input individually by Regex: as each type of input has its own pattern, specific requirements and constraints.
    opt missing required field || invalid type || RegEx does not match
        BaseModel-->>Model: throw new Error('<field> is invalid')
        Model-->>Cont: throw error
        Cont-->>Router: next(new BadRequestError(error.message))
        Router-->>Client: ğŸ”´400, "<error.message>"
    end

    Note over BaseModel: query with prepare Statements
    BaseModel->>BaseModel: query(sql, params)
    BaseModel->>+DB: do operation
    DB-->>-BaseModel: result
    opt SQL unique violation
        BaseModel-->>Model: throw new Error('duplicate key value')
        Model-->>Cont: throw new Error('User email already in use')
        Cont-->>Router: next(new ConflictError(error.message))
        Router-->>Client: ğŸ”´409, "User email already in use"
    end
    opt any other error
       Model-->>Cont: throw error
       Cont-->>Router: next(error)
       Router-->>Client: ğŸ”´500, "something went wrong"
    end
    BaseModel-->>-Model: return created Id

    Model-->>-Cont: Created user
    Cont->>Cont: formatResponse(201, 'User created successfully', { createdId })
    Cont-->>-Router: Formatted response
    Router-->>-Client: ğŸŸ¢201, { status: 201, message: "User created successfully", data: { createdId } }