%%{
    init: {
        "theme":"base",
        "themeVariables": {
            "fontFamily": "system-ui",
            'labelBoxBorderColor': '#ff0000'
        },
        "sequence": { 
            "wrap": true, 
            "width": 200 
        } 
    }
}%%
sequenceDiagram
    participant Client
    participant Sec as Security
    participant Router as UserRouter
    participant BaseCont as BaseController
    participant Cont as UserController extends BaseController
    participant MongoObject as MongoObject
    participant BaseModel as BaseModel extends MongoObject
    participant Model as UserModel extends BaseModel

    %% Create User
    Client->>+Router: POST /users/ (create User)
    Note over Router: this method will be used in several places in the application
    Router->>Router: MethodValidator(allowedMethods)
    opt path not available
        Router-->>Client: 401, "<path> not available"
    end
    opt method not allowed
        Router-->>Client: 405, "<method> not allowed for <path>"
    end
    Router->>+Cont: register(req, res, next)
    Cont->>Cont: Destructuring req.body
    Note over Cont: requiredFields = ['username', 'email', 'password', 'confirmPassword']
    Cont->>+BaseCont: verifyBody(req.body, requiredFields)
    opt missing required fields
        BaseCont-->>Cont: throw Error('<field> is required')
        Cont-->>Router: next(BadRequestError(error))
        Router-->>Client: 400, "<field> is required"
    end
    BaseCont->>-Cont: return true
    opt Passwords don't match
        Cont-->>Router: throw BadRequestError("Password don't match")
        Router-->>Client: 400, "Password don't match"
    end
    Cont->>Cont: validateEmail(email)
    opt Invalid email
        Cont-->>Router: throw BadRequestError("Invalid email")
        Router-->>Client: 400, "Invalid email"
    end
    Cont->>Cont: normalizeUsernameEmail(username, email)
    Cont->>+Model: createUser(newUserData)
    Model->>Model: _hashPassword(password)
    opt error hashing password
        Model-->>Cont: throw Error('Error hashing password')
        Cont-->>Router: next(error)
        Router-->>Client: 500, "something went wrong"
    end
    Model->>+BaseModel: create(data)
    BaseModel->>BaseModel: _verifyData(data)
    opt missing required field
        BaseModel-->>Model: throw Error('Missing required field: <field>')
        Model-->>Cont: next(error)
        Cont-->>Router: next(error)
        Router-->>Client: 400, "Missing required field: <field>"
    end
    opt invalid type
        BaseModel-->>Model: throw Error('Invalid type: <field>. expected <type>, got <type>')
        Model-->>Cont: next(error)
        Cont-->>Router: next(error)
        Router-->>Client: 400, "Invalid type: <field>"
    end
    opt if error creating user
        BaseModel-->>Model: throw Error
        Model-->>Cont: throw error
        alt error code == 11000
            Cont-->>Router: throw DuplicateError()
            Router-->>Client: 409, "Username or email already exists"
        else any other error
            Cont-->>Router: next(error)
            Router-->>Client: 500, "something went wrong"
        end
    end
    BaseModel->>-Model: Save user to database
    Model-->>-Cont: Created user
    Cont->>Cont: formatResponse(201, 'User created successfully', { createdId })
    Cont-->>-Router: Formatted response
    Router-->>-Client: 201, { status: 201, message: "User created successfully", data: { createdId } }