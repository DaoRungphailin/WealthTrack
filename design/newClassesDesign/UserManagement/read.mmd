%%{
    init: {
        "theme":"base",
        "themeVariables": {
            'labelBoxBorderColor': '#ff0000'
        },
        "sequence": { 
            "wrap": true, 
            "width": 180 
        } 
    }
}%%
sequenceDiagram
    participant Client
    participant Sec as Security
    participant Router as UserRouter
    box orange Controller
        participant BaseCont as BaseController
        participant Cont as UserController extends BaseController
    end
    participant PGClient as PostgreSQLClient
    participant BaseModel as BaseModel 
    participant Model as UserModel extends BaseModel
    participant DB as [(Database)]

    %% Get User
    Client->>+Router: GET /users/ (get current user)
    Note over Sec, Router: this method will be used in several places in the application
    Router->>+Sec: Verify Token(token)
    alt if token is invalid
    Note over Sec: the token maybe in Header or Cookies. so this method try to extract the token from the request
        Sec->>Sec: extractToken(request)
    end
    Sec->>Sec: jwt.decode(token)
    opt Token decode error
        Note over Sec, Router: Use the same error class to ensure consistency of error messages 
        Sec-->>Router: throw CredentialsException()
        Router-->>Client: ğŸ”´401, "Could not validate credentials"
    end
    opt Token expired
        Sec-->>Router: throw CredentialsException()
        Router-->>Client: ğŸ”´401, "Could not validate credentials"
    end
    opt Invalid token
        Sec-->>Router: throw CredentialsException()
        Router-->>Client: ğŸ”´401, "Could not validate credentials"
    end
    Sec-->>-Router: decoded user object
    Note over Router : this method defined in create.mmd
    Router->>Router: MethodValidator(allowedMethods)
    opt path not available
        Router-->>Client: ğŸ”´401, "<path> not available"
    end
    opt method not allowed
        Router-->>Client: ğŸ”´405, "<method> not allowed for <path>"
    end
    Router->>+Cont: getCurrentUser(req, res, next)
    Note over Cont, BaseCont: this method will use several times in the application
    Cont->>+BaseCont: getCurrentUser(req)
    BaseCont->>+Sec: Verify Token(token)
    Sec->>Sec: jwt.decode(token)
    Sec-->>-BaseCont: decoded user object

    BaseCont->>+Model: findUser([decoded.userEmail])
    Note over Model, BaseModel: this method defined in BankAccountManagement/ReadOne.mmd, please reference from that diagram
    Model->>+BaseModel: findOne([userEmail])
    BaseModel->>BaseModel: validateSchema(data) 
    Note over BaseModel: also validate each input individually by Regex: as each type of input has its own pattern, specific requirements and constraints.
    opt missing required field || invalid type || RegEx does not match
        BaseModel-->>Model: throw new Error('<field> is invalid')
        Model-->>BaseCont: throw error
        BaseCont-->>Cont: pass error
        Cont-->>Router: next(new BadRequestError(error.message))
        Router-->>Client: ğŸ”´400, "<error.message>"
    end
    Note over BaseModel: query with prepare Statements
    BaseModel->>BaseModel: query(sql, params)
    BaseModel->>+DB: do operation
    DB-->>-BaseModel: result
    opt any error occurred
        BaseModel-->>Model: throw Error
        Model-->>BaseCont: pass error
        BaseCont-->>Cont: pass error
        Cont-->>Router: next(error)
        Router-->>Client: ğŸ”´500, "something went wrong"
    end
    BaseModel-->>-Model: user data object
    opt user not found
        Model-->>BaseCont: throw Error('User not found')
        BaseCont-->>Cont: pass error
        Cont-->>Router: next(UserNotFoundError())
        Router-->>Client: ğŸ”´404, "User not found"
    end
    Model->>Model: Remove hashedPassword from user data
    Model-->>-BaseCont: User data without password

    BaseCont-->>-Cont: User data
    Cont->>Cont: formatResponse(200, 'User found', { user })
    Cont-->>-Router: Formatted response
    Router-->>-Client: ğŸŸ¢200, { status: 200, message: "User found", data: { user } }