%%{
    init: {
        "theme":"base",
        "themeVariables": {
            "fontFamily": "system-ui",
            'labelBoxBorderColor': '#ff0000'
        },
        "sequence": { 
            "wrap": true, 
            "width": 180 
        } 
    }
}%%
sequenceDiagram
    participant Client
    participant Sec as Security
    participant Router as UserRouter
    participant BaseCont as BaseController
    participant Cont as UserController extends BaseController
    participant Mongo as MongoObject
    participant BaseModel as BaseModel extends MongoObject
    participant Model as UserModel extends BaseModel

    %% Get User
    Client->>+Router: GET /users/ (get current user)
    Note over Sec, Router: this method will be used in several places in the application
    Router->>+Sec: Verify Token(token)
    alt if token is invalid
    Note over Sec: the token maybe in Header or Cookies. so this method try to extract the token from the request
        Sec->>Sec: extractToken(request)
    end
    Sec->>Sec: jwt.decode(token)
    opt Token decode error
        Note over Sec, Router: Use the same error class to ensure consistency of error messages 
        Sec-->>Router: throw CredentialsException()
        Router-->>Client: 401, "Could not validate credentials"
    end
    opt Token expired
        Sec-->>Router: throw CredentialsException()
        Router-->>Client: 401, "Could not validate credentials"
    end
    opt Invalid token
        Sec-->>Router: throw CredentialsException()
        Router-->>Client: 401, "Could not validate credentials"
    end
    Sec-->>-Router: decoded user object
    Note over Router : this method defined in create.mmd, the error are omitted for brevity
    Router->>Router: MethodValidator(allowedMethods)
    Router->>+Cont: getCurrentUser(req, res, next)
    Note over Cont, BaseCont: this method will use several times in the application
    Cont->>+BaseCont: getCurrentUser(req)
    BaseCont->>+Sec: Verify Token(token)
    Sec->>Sec: jwt.decode(token)
    Sec-->>-BaseCont: decoded user object
    BaseCont->>+Model: findId(decoded.id)
    Model->>+BaseModel: findById(id)
    BaseModel->>+Mongo: isValidObjectId(id)
    opt invalid id
        Mongo-->>BaseModel: false
        BaseModel-->>Model: throw Error('Invalid id')
        Model-->>BaseCont: throw error
        BaseCont-->>Router: next(BadRequestError('Invalid id'))
        Router-->>Client: 400, "Invalid id"
    end
    Mongo-->>-BaseModel: true
    BaseModel->>BaseModel: findById(id)
    opt user not found
        BaseModel-->>Model: null
        Model-->>BaseCont: throw Error('User not found')
        BaseCont-->>Router: next(UserNotFoundError())
        Router-->>Client: 404, "User not found"
    end
    opt error finding user
        BaseModel-->>Model: throw Error('Error finding user')
        Model-->>BaseCont: throw error
        BaseCont-->>Router: next(error)
        Router-->>Client: 500, "something went wrong"
    end
    BaseModel-->>-Model: user data object
    Model->>Model: Remove hashedPassword from user data
    Model-->>-BaseCont: User data without password
    BaseCont-->>-Cont: User data
    Cont->>Cont: formatResponse(200, 'User found', { user })
    Cont-->>-Router: Formatted response
    Router-->>-Client: 200, { status: 200, message: "User found", data: { user } }