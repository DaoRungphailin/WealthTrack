%%{
    init: {
        "theme":"base",
        "themeVariables": {
            "fontFamily": "system-ui",
            'labelBoxBorderColor': '#ff0000'
        },
        "sequence": { 
            "wrap": true, 
            "width": 180 
        } 
    }
}%%
sequenceDiagram
    participant Client
    participant Sec as Security
    participant Router as UserRouter
    participant BaseCont as BaseController
    participant Cont as UserController extends<br> BaseController
    participant Mongo as MongoObject
    participant BaseModel as BaseModel extends<br> MongoObject
    participant Model as UserModel extends<br> BaseModel

    %% Delete User
    Client->>+Router: DELETE /users/:userId (deleteUserById)
    Note over Sec, Router: this method defined in read.mmd, the error are omitted for brevity
    Router->>+Sec: Verify Token(token)
    Sec-->>-Router: decoded user object
    Note over Router : this method defined in create.mmd, the error are omitted for brevity
    Router->>Router: MethodValidator(allowedMethods)
    Router->>+Cont: deleteUser(req, res, next)
    Note over Cont: this method was defined in read.mmd
    Cont->>Cont: this.getCurrentUser(req)
    opt user not found
        Cont-->>Router: throw NotFoundError('User not found')
        Router-->>Client: 404, "User not found"
    end
    Cont->>Cont: Destructoring req.body
    opt currentPassword is not in req.body
        Cont-->>Router: throw BadRequestError('currentPassword is required')
        Router-->>Client: 400, "currentPassword is required"
    end
    Cont->>+Model: checkPassword(user.username, currentPassword)
    opt Invalid password
        Model-->>Cont: return false
        Cont-->>Router: throw PasswordError()
        Router-->>Client: 401, "Invalid username or password"
    end
    Model-->>-Cont: return true
    Note over Cont, BaseModel: In actually, this method called through UserModel but there is no anything required to do in UserModel<br> so we'll show as it directly call from Cont
    Cont->>+Model: deleteById(userId)
    Model->>+BaseModel: pass call
    BaseModel->>+Mongo: isValidObjectId(id)
    opt invalid id
        Mongo-->>BaseModel: false
        BaseModel-->>Cont: throw Error('Invalid id')
        Cont-->>Router: next(BadRequestError('Invalid id'))
        Router-->>Client: 400, "Invalid id"
    end
    Mongo-->>-BaseModel: true
    BaseModel->>BaseModel: findByIdAndDelete(id)
    opt any error
        BaseModel-->>Model: throw Error('Error deleting user')
        Model-->>Cont: pass error
        Cont-->>Router: next(error)
        Router-->>Client: 500, "something went wrong"
    end
    BaseModel-->>-Model: Deleted user
    Model-->>-Cont: pass result
    Cont->>Cont: formatResponse(200, 'User deleted successfully', { userId: deletedUser._id })
    Cont-->>-Router: Formatted response
    Router-->>-Client: 200, { status: 200, message: "User deleted successfully", data: { userId: deletedUser._id } }
