%%{
    init: {
        "theme":"base",
        "themeVariables": {
            'labelBoxBorderColor': '#ff0000'
        },
        "sequence": { 
            "wrap": true, 
            "width": 180 
        } 
    }
}%%
sequenceDiagram
    participant Client
    participant Sec as Security
    participant Router as UserRouter
    box orange Controller
        participant BaseCont as BaseController
        participant Cont as UserController extends BaseController
    end
    participant PGClient as PostgreSQLClient
    participant BaseModel as BaseModel 
    participant Model as UserModel extends BaseModel
    participant DB as [(Database)]

    %% Delete User
    Client->>+Router: DELETE /users
    Note over Sec, Router: this method defined in read.mmd
    Router->>+Sec: Verify Token(token)
    alt if token is invalid
    Note over Sec: the token maybe in Header or Cookies. so this method try to extract the token from the request
        Sec->>Sec: extractToken(request)
    end
    Sec->>Sec: jwt.decode(token)
    opt Token decode error
        Note over Sec, Router: Use the same error class to ensure consistency of error messages 
        Sec-->>Router: throw CredentialsException()
        Router-->>Client: ğŸ”´401, "Could not validate credentials"
    end
    opt Token expired
        Sec-->>Router: throw CredentialsException()
        Router-->>Client: ğŸ”´401, "Could not validate credentials"
    end
    opt Invalid token
        Sec-->>Router: throw CredentialsException()
        Router-->>Client: ğŸ”´401, "Could not validate credentials"
    end
    Sec-->>-Router: decoded user object
    Note over Router : this method defined in create.mmd
    Router->>Router: MethodValidator(allowedMethods)
    opt path not available
        Router-->>Client: ğŸ”´401, "<path> not available"
    end
    opt method not allowed
        Router-->>Client: ğŸ”´405, "<method> not allowed for <path>"
    end
    Router->>+Cont: deleteUser(req, res, next)
    Note over Cont, BaseCont: this method defined in read.mmd
    Cont->>+BaseCont: getCurrentUser(req)
    BaseCont-->>-Cont: User data
    opt user not found
        Cont-->>Router: throw NotFoundError('User not found')
        Router-->>Client: ğŸ”´404, "User not found"
    end
    Cont->>Cont: Destructoring req.body
    opt currentPassword is not in req.body
        Cont-->>Router: throw BadRequestError('currentPassword is required')
        Router-->>Client: ğŸ”´400, "currentPassword is required"
    end
    Cont->>+Model: checkPassword(user.email, currentPassword)
    opt Invalid password
        Model-->>Cont: return false
        Cont-->>Router: throw PasswordError()
        Router-->>Client: ğŸ”´401, "Invalid username or password"
    end
    Model-->>-Cont: return true
    Cont->>+Model: delete([userEmail])
    Model->>+BaseModel: pass call
    Note over BaseModel: this method defined in BankAccountManagement/create.mmd
    BaseModel->>BaseModel: validateSchema(data) 
    Note over BaseModel: also validate each input individually by Regex: as each type of input has its own pattern, specific requirements and constraints.
    opt missing required field || invalid type || RegEx does not match
        BaseModel-->>Model: throw new Error('<field> is invalid')
        Model-->>Cont: throw error
        Cont-->>Router: next(new BadRequestError(error.message))
        Router-->>Client: ğŸ”´400, "<error.message>"
    end
    Note over BaseModel: query with prepare Statements
    BaseModel->>BaseModel: query(sql, params)
    BaseModel->>+DB: do operation
    DB-->>-BaseModel: result
    opt any error
        BaseModel-->>Model: throw Error('Error deleting user')
        Model-->>Cont: pass error
        Cont-->>Router: next(error)
        Router-->>Client: ğŸ”´500, "something went wrong"
    end
    BaseModel-->>-Model: return true
    Model-->>-Cont: pass result
    Cont->>Cont: formatResponse(200, 'User deleted successfully', { userId: deletedUser._id })
    Cont-->>-Router: Formatted response
    Router-->>-Client: ğŸŸ¢200, { status: 200, message: "User deleted successfully", data: { userId: deletedUser._id } }
