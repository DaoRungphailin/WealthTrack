%%{
    init: {
        "theme":"base",
        "themeVariables": {
            'labelBoxBorderColor': '#ff0000'
        },
        "sequence": { 
            "wrap": true, 
            "width": 200 
        } 
    }
}%%
sequenceDiagram
    participant Client
    participant Sec as Security
    participant Router as TransactionRouter
    box orange Controller
        participant BaseCont as BaseController
        participant Cont as TransactionController
    end
    participant PGClient as PostgreSQLClient
    participant BaseModel as BaseModel
    participant Model as TransactionModel extends BaseModel
    %% participant ContainsModel as ContainsModel extends BaseModel
    %% participant BankAccountModel as BankAccountModel extends BaseModel
    participant Redis as RedisCache
    participant DB as [(Database)]

    Client->>+Router: GET /transactions/:transactionId (ReadOne Transaction)
     Note over Sec, Router: this method defined in UserManagement/read.mmd
    Router->>+Sec: verifyToken(req)
    alt Token decode error | Token expired | Invalid token
        Sec-->>Router: next(new UnauthorizedError('Invalid credentials'))
        Router-->>Client: ğŸ”´401, "Could not validate credentials"
    end
    Sec-->>-Router: decoded user object

    Note over Sec, Router: this method defined in UserManagement/create.mmd
    Router->>Router: MethodValidator(allowedMethods)
    opt path not available
        Router-->>Client: ğŸ”´404, "<path> not available"
    end
    opt method not allowed
        Router-->>Client: ğŸ”´405, "<method> not allowed for <path>"
    end

    Router->>+Cont: getOneTransaction(req, res, next)
    Cont->>Cont: Destructoring parameters
    
    Note over Cont: requiredFields = ["transactionId"]
    Cont->>+BaseCont: verifyField({transactionId}, requiredFields)
    Note over BaseCont: also type conversion eg. string -> decimal
    opt missing required fields
        BaseCont-->>Cont: throw Error('<field> is required')
        Cont-->>Router: next(BadRequestError(error))
        Router-->>Client: ğŸ”´400, "<field> is required"
    end
    BaseCont-->>-Cont: return true

    Note over Cont, BaseCont: this method defined in UserManagement/read.mmd
    Cont->>+BaseCont: getCurrentUser(req)
    BaseCont-->>-Cont: return User object
    opt user not found
        Cont-->>Router: next(new NotFoundError('User not found'))
        Router-->>Client: ğŸ”´404, "User not found"
    end

    Cont->>+Model: findTransactionDetail[transactionUuid])

    Model->>+BaseModel: validateSchema(data) 
    Note over BaseModel: also validate each input individually by Regex: as each type of input has its own pattern, specific requirements and constraints.
    opt missing required field || invalid type || RegEx does not match
        BaseModel-->>Model: throw new Error('<field> is invalid')
        Model-->>Cont: throw error
        Cont-->>Router: next(new BadRequestError(error.message))
        Router-->>Client: ğŸ”´400, "<error.message>"
    end
    BaseModel-->>-Model: return true

    Model->>+Redis: Check if required transaction Uuid was cached
    Redis-->>-Model: return cachedTransactionData
    opt if cache miss
        Model->>+BaseModel: query(sql, params)
        Note over BaseModel: query with prepare Statements
        BaseModel->>+DB: do operation
        DB-->>-BaseModel: result
        opt transaction not found
            BaseModel-->>Model: throw new Error("transaction not found")
            Model-->>Cont: throw error
            Cont-->>Router: next(error)
            Router-->>Client: ğŸ”´404, "transaction not found"
        end
        opt any error occurred
            BaseModel-->>Model: throw Error
            Model-->>Cont: throw error
            Cont-->>Router: next(error)
            Router-->>Client: ğŸ”´500, "something went wrong"
        end
        BaseModel-->>-Model: return the detail of given transaction Uuid 
        Note over Model, Redis: Async operation
        Model-)Redis: add transaction details with transaction Uuid as a key
    end
    Model->>-Cont: return the detail of given transaction Uuid

    Note over Cont, BaseCont: verify that the current user owns the bank accounts involved
    Cont->>+BaseCont: verifyOwnership(user, [transaction])
    opt bank account's user email does not match current user email
        BaseCont-->>Cont: return false
        Cont-->>Router: throw ForbiddenError('You are not allowed to access this resource')
        Router-->>Client: ğŸ”´403, "You are not allowed to access this resource"
    end
    BaseCont-->>-Cont: return true
    
    Cont->>Cont: formatResponse(200, 'Transaction found', TransactionDetail)
    Cont-->>-Router: return formatted response
    Router-->>-Client: ğŸŸ¢200, { status: 200, message: "Transaction found", data: {TransactionDetail} }
